{"solidity/TestSynapseRFQV2_flat.sol:AccessControl":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"AccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"solidity/TestSynapseRFQV2_flat.sol:AccessControlEnumerable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Extension of {AccessControl} that allows enumerating the members of each role.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {AccessControl} that allows enumerating the members of each role.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"AccessControlEnumerable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"solidity/TestSynapseRFQV2_flat.sol:Address":{"code":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220fa35d04625a30f71170ba7695d9c6d409dc5773bd88e8ce1913ce2a27e8a1ddd64736f6c63430008140033","runtime-code":"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220fa35d04625a30f71170ba7695d9c6d409dc5773bd88e8ce1913ce2a27e8a1ddd64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"34284:5718:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;34284:5718:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"34284:5718:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","errors":{"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}]},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{}},"solidity/TestSynapseRFQV2_flat.sol:Admin":{"code":"","runtime-code":"","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"54682:1777:0:-:0;;;55481:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;55515:38;25160:4;55546:6;55515:10;:38::i;:::-;;55481:77;54682:1777;;32852:245;32950:4;;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33014:59;33085:7;-1:-1:-1;32852:245:0;;;;;:::o;28907:290::-;28996:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;-1:-1:-1;;;;;29045:29:0;;;;;;;;;:36;;-1:-1:-1;;29045:36:0;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;-1:-1:-1;;;;;29094:40:0;29112:7;-1:-1:-1;;;;;29094:40:0;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;-1:-1:-1;;;;;12822:23:0;;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;14:290:1;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:1;;214:42;;204:70;;270:1;267;260:12;14:290;54682:1777:0;;;;;;","srcMapRuntime":"54682:1777:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31534:226;;;;;;:::i;:::-;;:::i;:::-;;;516:14:1;;509:22;491:41;;479:2;464:18;31534:226:0;;;;;;;;54914:60;;54951:23;54914:60;;;;;689:25:1;;;677:2;662:18;54914:60:0;543:177:1;55846:349:0;;;;;;:::i;:::-;;:::i;:::-;;55090:45;;55129:6;55090:45;;26666:114;;;;;;:::i;:::-;26731:7;26753:12;;;;;;;;;;:22;;;;26666:114;27050:142;;;;;;:::i;:::-;;:::i;28106:237::-;;;;;;:::i;:::-;;:::i;55248:30::-;;;;;;54844:66;;54884:26;54844:66;;32319:148;;;;;;:::i;:::-;;:::i;:::-;;;2246:42:1;2234:55;;;2216:74;;2204:2;2189:18;32319:148:0;2070:226:1;25760:142:0;;;;;;:::i;:::-;25849:4;25868:12;;;;;;;;;;;:29;;;;;;;;;;;;;;;;25760:142;54776:64;;54815:25;54776:64;;25115:49;;25160:4;25115:49;;55562:280;;;;;;:::i;:::-;;:::i;56199:258::-;;;;;;:::i;:::-;;:::i;55049:37::-;;55083:3;55049:37;;32625:133;;;;;;:::i;:::-;;:::i;54978:66::-;;55018:26;54978:66;;27448:144;;;;;;:::i;:::-;;:::i;55330:47::-;;;;;;:::i;:::-;;;;;;;;;;;;;;55447:29;;;;;;31534:226;31627:4;31652:57;;;31667:42;31652:57;;:103;;;31719:36;31743:11;31719:23;:36::i;:::-;31639:116;31534:226;-1:-1:-1;;31534:226:0:o;55846:349::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;55978:19:::1;::::0;::::1;55958:17;55978:19:::0;;;:12:::1;:19;::::0;;;;;;56007:14;;;56003:27:::1;;56023:7;55846:349:::0;;;:::o;56003:27::-:1;56067:19;::::0;::::1;56089:1;56067:19:::0;;;:12:::1;:19;::::0;;;;:23;56096:45:::1;::::0;56120:9;56131;56096:23:::1;:45::i;:::-;56152:38;::::0;;2889:42:1;2958:15;;;2940:34;;3010:15;;3005:2;2990:18;;2983:43;3042:18;;;3035:34;;;56152:38:0::1;::::0;2867:2:1;2852:18;56152:38:0::1;;;;;;;55952:243;25400:1;55846:349:::0;;;:::o;27050:142::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27162:25:::1;27173:4;27179:7;27162:10;:25::i;:::-;;27050:142:::0;;;:::o;28106:237::-;28207:34;;;19686:10;28207:34;28203:92;;28258:30;;;;;;;;;;;;;;28203:92;28301:37;28313:4;28319:18;28301:11;:37::i;32319:148::-;32412:7;32434:18;;;:12;:18;;;;;:28;;32456:5;32434:21;:28::i;:::-;32427:35;32319:148;-1:-1:-1;;;32319:148:0:o;55562:280::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;55129:6:::1;55665:10;:26;;55657:55;;;::::0;::::1;::::0;;3282:2:1;55657:55:0::1;::::0;::::1;3264:21:1::0;3321:2;3301:18;;;3294:30;3360:18;3340;;;3333:46;3396:18;;55657:55:0::1;;;;;;;;;55739:15;::::0;;55760:28;;;;55799:38:::1;::::0;;3599:25:1;;;3655:2;3640:18;;3633:34;;;55799:38:0::1;::::0;3572:18:1;55799:38:0::1;;;;;;;;55651:191;55562:280:::0;;:::o;56199:258::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;56328:14:::1;::::0;;56348:34;;;;56393:59:::1;::::0;;3599:25:1;;;3655:2;3640:18;;3633:34;;;56393:59:0::1;::::0;3572:18:1;56393:59:0::1;3425:248:1::0;32625:133:0;32704:7;32726:18;;;:12;:18;;;;;:27;;:25;:27::i;27448:144::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27561:26:::1;27573:4;27579:7;27561:11;:26::i;25465:216::-:0;25558:4;25583:47;;;25598:32;25583:47;;:93;;-1:-1:-1;18903:25:0;18888:40;;;;25640:36;18785:148;26101:97;26163:30;26174:4;19686:10;26163;:30::i;:::-;26101:97;:::o;52518:610::-;52701:4;52687:19;;;;52683:32;;52518:610;;;:::o;52683:32::-;52779:5;52788:1;52779:10;52775:23;;52518:610;;;:::o;52775:23::-;52807:20;;;;;52803:321;;52969:12;52987:2;:7;;53002:5;52987:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52968:44;;;53028:7;53020:39;;;;;;;4090:2:1;53020:39:0;;;4072:21:1;4129:2;4109:18;;;4102:30;4168:21;4148:18;;;4141:49;4207:18;;53020:39:0;3888:343:1;52803:321:0;53080:37;:26;;;53107:2;53111:5;53080:26;:37::i;32852:245::-;32950:4;32962:12;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33085:7;32852:245;-1:-1:-1;;;32852:245:0:o;33192:250::-;33291:4;33303:12;33318:32;33336:4;33342:7;33318:17;:32::i;:::-;33303:47;;33360:7;33356:62;;;33377:18;;;;:12;:18;;;;;:34;;33403:7;33377:25;:34::i;13914:162::-;14000:7;14046:22;14050:3;14062:5;14046:3;:22::i;13485:109::-;13548:7;13570:19;13578:3;9138:18;;9060:101;26318:181;25849:4;25868:12;;;;;;;;;;;:29;;;;;;;;;;;;;26397:98;;26441:47;;;;;4440:42:1;4428:55;;26441:47:0;;;4410:74:1;4500:18;;;4493:34;;;4383:18;;26441:47:0;4236:297:1;26397:98:0;26318:181;;:::o;47628:154::-;47733:43;;;47748:14;4428:55:1;;47733:43:0;;;4410:74:1;4500:18;;;;4493:34;;;47733:43:0;;;;;;;;;;4383:18:1;;;;47733:43:0;;;;;;;;;;;;;;47706:71;;47726:5;;47706:19;:71::i;28907:290::-;28996:4;25868:12;;;;;;;;;;;:29;;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;:29;;;;;;;;;;:36;;;;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;29094:40;;29112:7;29094:40;;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;12822:23;;;12797:4;:50::i;29416:291::-;29506:4;25868:12;;;;;;;;;;;:29;;;;;;;;;;;;;29518:185;;;29586:5;29554:12;;;;;;;;;;;:29;;;;;;;;;;;:37;;;;;;29604:40;19686:10;;29554:12;;29604:40;;29586:5;29604:40;-1:-1:-1;29659:4:0;29652:11;;13006:162;13091:4;13110:53;13118:3;13138:23;;;13110:7;:53::i;9481:112::-;9548:7;9570:3;:11;;9582:5;9570:18;;;;;;;;:::i;:::-;;;;;;;;;9563:25;;9481:112;;;;:::o;50348:597::-;50751:23;50777:33;:27;;;50805:4;50777:27;:33::i;:::-;50751:59;;50820:10;:17;50841:1;50820:22;;:57;;;;;50858:10;50847:30;;;;;;;;;;;;:::i;:::-;50846:31;50820:57;50816:125;;;50894:40;;;;;2246:42:1;2234:55;;50894:40:0;;;2216:74:1;2189:18;;50894:40:0;2070:226:1;7047:356:0;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;7557:1222;7623:4;7744:21;;;:14;;;:21;;;;;;7776:13;;7772:1003;;8113:18;8134:12;8145:1;8134:8;:12;:::i;:::-;8174:18;;8113:33;;-1:-1:-1;8154:17:0;;8174:22;;8195:1;;8174:22;:::i;:::-;8154:42;;8223:9;8209:10;:23;8205:332;;8244:17;8264:3;:11;;8276:9;8264:22;;;;;;;;:::i;:::-;;;;;;;;;8244:42;;8395:9;8369:3;:11;;8381:10;8369:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;8492:25;;;:14;;;:25;;;;;:36;;;8205:332;8603:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;8694:3;:14;;:21;8709:5;8694:21;;;;;;;;;;;8687:28;;;8731:4;8724:11;;;;;;;7772:1003;8763:5;8756:12;;;;;36664:157;36751:12;36778:38;36800:6;36808:4;36814:1;36751:12;37364;37378:23;37405:6;:11;;37424:5;37431:4;37405:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37363:73;;;;37449:55;37476:6;37484:7;37493:10;37449:26;:55::i;:::-;37442:62;37125:384;-1:-1:-1;;;;;;37125:384:0:o;38534:510::-;38664:12;38689:7;38684:356;;38706:19;38714:10;38706:7;:19::i;:::-;38684:356;;;38908:17;;:22;:49;;;;-1:-1:-1;38934:18:0;;;;:23;38908:49;38904:105;;;38976:24;;;;;2246:42:1;2234:55;;38976:24:0;;;2216:74:1;2189:18;;38976:24:0;2070:226:1;38904:105:0;-1:-1:-1;39023:10:0;39016:17;;39548:452;39671:17;;:21;39667:329;;39873:10;39867:17;39921:15;39908:10;39904:2;39900:19;39893:44;39667:329;39972:17;;;;;;;;;;;;;;14:332:1;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:260::-;994:6;1002;1055:2;1043:9;1034:7;1030:23;1026:32;1023:52;;;1071:1;1068;1061:12;1023:52;1094:29;1113:9;1094:29;:::i;:::-;1084:39;;1142:38;1176:2;1165:9;1161:18;1142:38;:::i;:::-;1132:48;;926:260;;;;;:::o;1373:180::-;1432:6;1485:2;1473:9;1464:7;1460:23;1456:32;1453:52;;;1501:1;1498;1491:12;1453:52;-1:-1:-1;1524:23:1;;1373:180;-1:-1:-1;1373:180:1:o;1558:254::-;1626:6;1634;1687:2;1675:9;1666:7;1662:23;1658:32;1655:52;;;1703:1;1700;1693:12;1655:52;1739:9;1726:23;1716:33;;1768:38;1802:2;1791:9;1787:18;1768:38;:::i;1817:248::-;1885:6;1893;1946:2;1934:9;1925:7;1921:23;1917:32;1914:52;;;1962:1;1959;1952:12;1914:52;-1:-1:-1;;1985:23:1;;;2055:2;2040:18;;;2027:32;;-1:-1:-1;1817:248:1:o;2486:186::-;2545:6;2598:2;2586:9;2577:7;2573:23;2569:32;2566:52;;;2614:1;2611;2604:12;2566:52;2637:29;2656:9;2637:29;:::i;4840:184::-;4892:77;4889:1;4882:88;4989:4;4986:1;4979:15;5013:4;5010:1;5003:15;5029:277;5096:6;5149:2;5137:9;5128:7;5124:23;5120:32;5117:52;;;5165:1;5162;5155:12;5117:52;5197:9;5191:16;5250:5;5243:13;5236:21;5229:5;5226:32;5216:60;;5272:1;5269;5262:12;5311:282;5378:9;;;5399:11;;;5396:191;;;5443:77;5440:1;5433:88;5544:4;5541:1;5534:15;5572:4;5569:1;5562:15;5598:184;5650:77;5647:1;5640:88;5747:4;5744:1;5737:15;5771:4;5768:1;5761:15;5787:412;5916:3;5954:6;5948:13;5979:1;5989:129;6003:6;6000:1;5997:13;5989:129;;;6101:4;6085:14;;;6081:25;;6075:32;6062:11;;;6055:53;6018:12;5989:129;;;-1:-1:-1;6173:1:1;6137:16;;6162:13;;;-1:-1:-1;6137:16:1;5787:412;-1:-1:-1;5787:412:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldChainGasAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"ChainGasAmountUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFeeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"FeeRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeesSwept","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_BPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_RATE_MAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GUARD_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFUNDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainGasAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFeeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"protocolFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"setChainGasAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"setProtocolFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"chainGasAmount()":{"notice":"Chain gas amount to forward as rebate if requested"},"protocolFeeRate()":{"notice":"Protocol fee rate taken on origin amount deposited in origin chain"},"protocolFees(address)":{"notice":"Protocol fee amounts accumulated"}},"version":1},"developerDoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC20 token failed."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChainGasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"ChainGasAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"setChainGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"chainGasAmount()\":{\"notice\":\"Chain gas amount to forward as rebate if requested\"},\"protocolFeeRate()\":{\"notice\":\"Protocol fee rate taken on origin amount deposited in origin chain\"},\"protocolFees(address)\":{\"notice\":\"Protocol fee amounts accumulated\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"Admin\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","FEE_BPS()":"bf333f2c","FEE_RATE_MAX()":"0f5f6ed7","GOVERNOR_ROLE()":"ccc57490","GUARD_ROLE()":"03ed0ee5","REFUNDER_ROLE()":"5960ccf2","RELAYER_ROLE()":"926d7d7f","chainGasAmount()":"e00a83e0","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","protocolFeeRate()":"58f85880","protocolFees(address)":"dcf844a7","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setChainGasAmount(uint256)":"b250fe6b","setProtocolFeeRate(uint256)":"b13aa2d6","supportsInterface(bytes4)":"01ffc9a7","sweepProtocolFees(address,address)":"06f333f2"}},"solidity/TestSynapseRFQV2_flat.sol:Context":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{}},"solidity/TestSynapseRFQV2_flat.sol:ERC165":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"ERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"supportsInterface(bytes4)":"01ffc9a7"}},"solidity/TestSynapseRFQV2_flat.sol:EnumerableSet":{"code":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207cfb8353623a1b425b7274152d8e26d187a0b6cb719a52a4776bf676cd85b68664736f6c63430008140033","runtime-code":"0x730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212207cfb8353623a1b425b7274152d8e26d187a0b6cb719a52a4776bf676cd85b68664736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"6190:10960:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;6190:10960:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"6190:10960:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for managing https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive types. Sets have the following properties: - Elements are added, removed, and checked for existence in constant time (O(1)). - Elements are enumerated in O(n). No guarantees are made on the ordering. ```solidity contract Example {     // Add the library methods     using EnumerableSet for EnumerableSet.AddressSet;     // Declare a set state variable     EnumerableSet.AddressSet private mySet; } ``` As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`) and `uint256` (`UintSet`) are supported. [WARNING] ==== Trying to delete such a structure from storage will likely result in data corruption, rendering the structure unusable. See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info. In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an array of EnumerableSet. ====\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"EnumerableSet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{}},"solidity/TestSynapseRFQV2_flat.sol:FastBridge":{"code":"0x60a060405234801562000010575f80fd5b5060405162002c9f38038062002c9f83398101604081905262000033916200018a565b80620000405f826200004d565b50504360805250620001b2565b5f806200005b848462000088565b905080156200007f575f8481526001602052604090206200007d908462000133565b505b90505b92915050565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166200012b575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620000e23390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000082565b505f62000082565b5f6200007f836001600160a01b0384165f8181526001830160205260408120546200012b57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915562000082565b5f602082840312156200019b575f80fd5b81516001600160a01b03811681146200007f575f80fd5b608051612ad4620001cb5f395f6106270152612ad45ff3fe60806040526004361061025d575f3560e01c80639010d07c1161014b578063add98c70116100c6578063ca15c8731161007c578063d547741f11610062578063d547741f1461076e578063dcf844a71461078d578063e00a83e0146107b8575f80fd5b8063ca15c8731461071c578063ccc574901461073b575f80fd5b8063b13aa2d6116100ac578063b13aa2d6146106c8578063b250fe6b146106e7578063bf333f2c14610706575f80fd5b8063add98c7014610694578063affed0e0146106b3575f80fd5b8063a217fddf1161011b578063a5bbe22b11610101578063a5bbe22b14610462578063aa9641ab14610649578063ac11fb1a14610668575f80fd5b8063a217fddf14610603578063a3ec191a14610616575f80fd5b80639010d07c146104d757806391ad50391461050e57806391d148541461058e578063926d7d7f146105d0575f80fd5b806341fcb612116101db5780635eb7d946116101ab5780638379a24f116101915780638379a24f14610477578063886d36ff146104a55780638f0d6f17146104c4575f80fd5b80635eb7d94614610443578063820688d514610462575f80fd5b806341fcb612146103c957806345851694146103e857806358f85880146103fb5780635960ccf214610410575f80fd5b80630f5f6ed711610230578063248a9ca311610216578063248a9ca31461035d5780632f2ff15d1461038b57806336568abe146103aa575f80fd5b80630f5f6ed714610332578063190da59514610347575f80fd5b806301ffc9a71461026157806303ed0ee514610295578063051287bc146102d657806306f333f214610311575b5f80fd5b34801561026c575f80fd5b5061028061027b36600461226a565b6107cd565b60405190151581526020015b60405180910390f35b3480156102a0575f80fd5b506102c87f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d81565b60405190815260200161028c565b3480156102e1575f80fd5b506103046102f03660046122a9565b60056020525f908152604090205460ff1681565b60405161028c91906122ed565b34801561031c575f80fd5b5061033061032b366004612350565b610828565b005b34801561033d575f80fd5b506102c861271081565b348015610352575f80fd5b506102c862093a8081565b348015610368575f80fd5b506102c86103773660046122a9565b5f9081526020819052604090206001015490565b348015610396575f80fd5b506103306103a5366004612387565b6108ed565b3480156103b5575f80fd5b506103306103c4366004612387565b610917565b3480156103d4575f80fd5b506103306103e33660046124cc565b610963565b6103306103f6366004612544565b610b97565b348015610406575f80fd5b506102c860025481565b34801561041b575f80fd5b506102c87fdb9556138406326f00296e13ea2ad7db24ba82381212d816b1a40c23b466b32781565b34801561044e575f80fd5b5061033061045d3660046125e5565b610e9e565b34801561046d575f80fd5b506102c861070881565b348015610482575f80fd5b506102806104913660046122a9565b60076020525f908152604090205460ff1681565b3480156104b0575f80fd5b506103306104bf36600461261f565b611072565b6103306104d23660046125e5565b6111a3565b3480156104e2575f80fd5b506104f66104f1366004612661565b6113e6565b6040516001600160a01b03909116815260200161028c565b348015610519575f80fd5b506105626105283660046122a9565b60066020525f90815260409020546bffffffffffffffffffffffff8116906c0100000000000000000000000090046001600160a01b031682565b604080516bffffffffffffffffffffffff90931683526001600160a01b0390911660208301520161028c565b348015610599575f80fd5b506102806105a8366004612387565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105db575f80fd5b506102c87fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b34801561060e575f80fd5b506102c85f81565b348015610621575f80fd5b506102c87f000000000000000000000000000000000000000000000000000000000000000081565b348015610654575f80fd5b50610280610663366004612387565b611404565b348015610673575f80fd5b506106876106823660046125e5565b611504565b60405161028c9190612681565b34801561069f575f80fd5b506103306106ae3660046122a9565b611576565b3480156106be575f80fd5b506102c860085481565b3480156106d3575f80fd5b506103306106e23660046122a9565b6116dc565b3480156106f2575f80fd5b506103306107013660046122a9565b6117be565b348015610711575f80fd5b506102c8620f424081565b348015610727575f80fd5b506102c86107363660046122a9565b611826565b348015610746575f80fd5b506102c87f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b348015610779575f80fd5b50610330610788366004612387565b61183c565b348015610798575f80fd5b506102c86107a7366004612767565b60036020525f908152604090205481565b3480156107c3575f80fd5b506102c860045481565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610822575061082282611860565b92915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610852816118f6565b6001600160a01b0383165f90815260036020526040812054908190036108785750505050565b6001600160a01b0384165f8181526003602052604081205561089b908483611903565b604080516001600160a01b038087168252851660208201529081018290527f244e51bc38c1452fa8aaf487bcb4bca36c2baa3a5fbdb776b1eabd8dc6d277cd9060600160405180910390a1505b505050565b5f82815260208190526040902060010154610907816118f6565b6109118383611a21565b50505050565b6001600160a01b0381163314610959576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108e88282611a54565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461098d816118f6565b825160208401205f61099e85611504565b905060025f8381526005602052604090205460ff1660048111156109c4576109c46122c0565b146109fb576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c0100000000000000000000000090046001600160a01b03169082018190523314610a7d576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611610aca576040517f1992d0bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600560205260409020805460ff1916600317905561010082015115610b245761010082015160808301516001600160a01b03165f9081526003602052604081208054909190610b1e9084906127af565b90915550505b608082015160c0830151610b426001600160a01b0383168883611903565b604080516001600160a01b03848116825260208201849052891691339188917f582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac67891015b60405180910390a45050505050505050565b46815f015163ffffffff1603610bd9576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08101511580610bec575060c0810151155b15610c23576040517fe38820c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101516001600160a01b03161580610c48575060808101516001600160a01b0316155b15610c7f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c8b610708426127af565b8161010001511015610cc9576040517f04b7fcc800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610cdd3083606001518460a00151611a7f565b90505f806002541115610d0957620f424060025483610cfc91906127c2565b610d0691906127d9565b90505b610d138183612811565b91505f6040518061018001604052804663ffffffff168152602001855f015163ffffffff16815260200185602001516001600160a01b0316815260200185604001516001600160a01b0316815260200185606001516001600160a01b0316815260200185608001516001600160a01b031681526020018481526020018560c0015181526020018381526020018560e0015115158152602001856101000151815260200160085f815480929190610dc890612824565b909155509052604051610dde9190602001612681565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020808301919091205f8181526005835293909320805460ff191660011790558701518751606089015160808a015160c08b015160e08c015195985095966001600160a01b039094169587957f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a95610e8f958b959094909390928e9261287d565b60405180910390a35050505050565b805160208201205f610eaf83611504565b335f9081527fd2043bf65931af3dbecf60d0db8f40e4160406d7beb00522f4200cf4944a1eb8602052604090205490915060ff1615610f2b578061014001514211610f26576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f77565b62093a80816101400151610f3f91906127af565b4211610f77576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8381526005602052604090205460ff166004811115610f9b57610f9b6122c0565b14610fd2576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82815260056020526040808220805460ff19166004179055820151608083015161010084015160c08501519293919261100c91906127af565b90506110226001600160a01b0383168483611903565b604080516001600160a01b0384811682526020820184905285169187917fb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958910160405180910390a3505050505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461109c816118f6565b8251602084012060015f8281526005602052604090205460ff1660048111156110c7576110c76122c0565b146110fe576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8181526005602090815260408083208054600260ff19909116179055805180820182526bffffffffffffffffffffffff4281168252338285018181528787526006865295849020925195516001600160a01b03166c0100000000000000000000000002959091169490941790555185815283917f4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4910160405180910390a350505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc46111cd816118f6565b815160208301205f6111de84611504565b90504663ffffffff16816020015163ffffffff1614611229576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806101400151421115611268576040517f559895a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526007602052604090205460ff16156112b0576040517fbef7bb7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600760205260409020805460ff19166001179055606081015160a082015160e08301516004546101208501516112f757505f6112f1848484611a7f565b50611368565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b0384160161133b576112f1848461133684866127af565b611a7f565b611346848484611a7f565b506113668473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee83611a7f565b505b845160808087015160a08089015160c0808b015160e08c01516040805163ffffffff90991689526001600160a01b0396871660208a0152938616938801939093526060870152938501528301849052861691339189917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9101610b85565b5f8281526001602052604081206113fd9083611c49565b9392505050565b5f60025f8481526005602052604090205460ff166004811115611429576114296122c0565b14611460576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526001600160a01b036c0100000000000000000000000090910481169183018290528416146114e5576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611949350505050565b60408051610180810182525f8082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015282519091610822918401810190840161292d565b7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d6115a0816118f6565b60025f8381526005602052604090205460ff1660048111156115c4576115c46122c0565b146115fb576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff8082168085526c010000000000000000000000009092046001600160a01b03169390920192909252610708914203161115611689576040517f3e908aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600560209081526040808320805460ff19166001179055600690915280822082905551339184917f0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad49190a35050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55611706816118f6565b612710821115611777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e657746656552617465203e206d61780000000000000000000000000000000060448201526064015b60405180910390fd5b600280549083905560408051828152602081018590527f14914da2bf76024616fbe1859783fcd4dbddcb179b1f3a854949fbf920dcb95791015b60405180910390a1505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556117e8816118f6565b600480549083905560408051828152602081018590527f5cf09b12f3f56b4c564d51b25b40360af6d795198adb61ae0806a36c294323fa91016117b1565b5f81815260016020526040812061082290611c54565b5f82815260208190526040902060010154611856816118f6565b6109118383611a54565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061082257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610822565b6119008133611c5d565b50565b306001600160a01b0383160361191857505050565b805f0361192457505050565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601611a0d575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461199d576040519150601f19603f3d011682016040523d82523d5f602084013e6119a2565b606091505b5050905080610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c656400000000000000000000000000604482015260640161176e565b6108e86001600160a01b0384168383611ccc565b5f80611a2d8484611d40565b905080156113fd575f848152600160205260409020611a4c9084611de7565b509392505050565b5f80611a608484611dfb565b905080156113fd575f848152600160205260409020611a4c9084611e7c565b5f6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611be357611ab6836001600160a01b0316611e90565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528416906370a0823190602401602060405180830381865afa158015611b13573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b3791906129f7565b9050611b4e6001600160a01b038416338685611f35565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528291908516906370a0823190602401602060405180830381865afa158015611bae573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bd291906129f7565b611bdc9190612811565b90506113fd565b348214611c1c576040517f81de0bf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014611c4057611c406001600160a01b0384168584611903565b50349392505050565b5f6113fd8383611f6e565b5f610822825490565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16611cc8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440161176e565b5050565b6040516001600160a01b038381166024830152604482018390526108e891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f94565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16611de0575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611d983390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610822565b505f610822565b5f6113fd836001600160a01b03841661200e565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1615611de0575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610822565b5f6113fd836001600160a01b038416612053565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03821601611ef2576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f03611900576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526109119186918216906323b872dd90608401611cf9565b5f825f018281548110611f8357611f83612a0e565b905f5260205f200154905092915050565b5f611fa86001600160a01b03841683612136565b905080515f14158015611fcc575080806020019051810190611fca9190612a3b565b155b156108e8576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161176e565b5f818152600183016020526040812054611de057508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610822565b5f818152600183016020526040812054801561212d575f612075600183612811565b85549091505f9061208890600190612811565b90508082146120e7575f865f0182815481106120a6576120a6612a0e565b905f5260205f200154905080875f0184815481106120c6576120c6612a0e565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806120f8576120f8612a56565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610822565b5f915050610822565b60606113fd83835f845f80856001600160a01b0316848660405161215a9190612a83565b5f6040518083038185875af1925050503d805f8114612194576040519150601f19603f3d011682016040523d82523d5f602084013e612199565b606091505b50915091506121a98683836121b3565b9695505050505050565b6060826121c8576121c382612228565b6113fd565b81511580156121df57506001600160a01b0384163b155b15612221576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161176e565b50806113fd565b8051156122385780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6020828403121561227a575f80fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146113fd575f80fd5b5f602082840312156122b9575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6020810160058310612326577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b6001600160a01b0381168114611900575f80fd5b803561234b8161232c565b919050565b5f8060408385031215612361575f80fd5b823561236c8161232c565b9150602083013561237c8161232c565b809150509250929050565b5f8060408385031215612398575f80fd5b82359150602083013561237c8161232c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610120810167ffffffffffffffff811182821017156123fb576123fb6123aa565b60405290565b604051610180810167ffffffffffffffff811182821017156123fb576123fb6123aa565b5f82601f830112612434575f80fd5b813567ffffffffffffffff8082111561244f5761244f6123aa565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612495576124956123aa565b816040528381528660208588010111156124ad575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156124dd575f80fd5b823567ffffffffffffffff8111156124f3575f80fd5b6124ff85828601612425565b925050602083013561237c8161232c565b63ffffffff81168114611900575f80fd5b803561234b81612510565b8015158114611900575f80fd5b803561234b8161252c565b5f6101208284031215612555575f80fd5b61255d6123d7565b61256683612521565b815261257460208401612340565b602082015261258560408401612340565b604082015261259660608401612340565b60608201526125a760808401612340565b608082015260a083013560a082015260c083013560c08201526125cc60e08401612539565b60e0820152610100928301359281019290925250919050565b5f602082840312156125f5575f80fd5b813567ffffffffffffffff81111561260b575f80fd5b61261784828501612425565b949350505050565b5f8060408385031215612630575f80fd5b823567ffffffffffffffff811115612646575f80fd5b61265285828601612425565b95602094909401359450505050565b5f8060408385031215612672575f80fd5b50508035926020909101359150565b815163ffffffff168152610180810160208301516126a7602084018263ffffffff169052565b5060408301516126c260408401826001600160a01b03169052565b5060608301516126dd60608401826001600160a01b03169052565b5060808301516126f860808401826001600160a01b03169052565b5060a083015161271360a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516127488285018215159052565b5050610140838101519083015261016092830151929091019190915290565b5f60208284031215612777575f80fd5b81356113fd8161232c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561082257610822612782565b808202811582820484141761082257610822612782565b5f8261280c577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561082257610822612782565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361285457612854612782565b5060010190565b5f5b8381101561287557818101518382015260200161285d565b50505f910152565b60e081525f88518060e084015261010061289d8282860160208e0161285b565b63ffffffff9990991660208401526001600160a01b039788166040840152959096166060820152608081019390935260a0830191909152151560c0820152601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190910192915050565b805161234b81612510565b805161234b8161232c565b805161234b8161252c565b5f610180828403121561293e575f80fd5b612946612401565b61294f8361290c565b815261295d6020840161290c565b602082015261296e60408401612917565b604082015261297f60608401612917565b606082015261299060808401612917565b60808201526129a160a08401612917565b60a082015260c083015160c082015260e083015160e08201526101008084015181830152506101206129d4818501612922565b908201526101408381015190820152610160928301519281019290925250919050565b5f60208284031215612a07575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612a4b575f80fd5b81516113fd8161252c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f8251612a9481846020870161285b565b919091019291505056fea26469706673582212206c1caad206e8ff870920a9526ab75035e8ff4e7e888175fa77aae5149fdff56f64736f6c63430008140033","runtime-code":"0x60806040526004361061025d575f3560e01c80639010d07c1161014b578063add98c70116100c6578063ca15c8731161007c578063d547741f11610062578063d547741f1461076e578063dcf844a71461078d578063e00a83e0146107b8575f80fd5b8063ca15c8731461071c578063ccc574901461073b575f80fd5b8063b13aa2d6116100ac578063b13aa2d6146106c8578063b250fe6b146106e7578063bf333f2c14610706575f80fd5b8063add98c7014610694578063affed0e0146106b3575f80fd5b8063a217fddf1161011b578063a5bbe22b11610101578063a5bbe22b14610462578063aa9641ab14610649578063ac11fb1a14610668575f80fd5b8063a217fddf14610603578063a3ec191a14610616575f80fd5b80639010d07c146104d757806391ad50391461050e57806391d148541461058e578063926d7d7f146105d0575f80fd5b806341fcb612116101db5780635eb7d946116101ab5780638379a24f116101915780638379a24f14610477578063886d36ff146104a55780638f0d6f17146104c4575f80fd5b80635eb7d94614610443578063820688d514610462575f80fd5b806341fcb612146103c957806345851694146103e857806358f85880146103fb5780635960ccf214610410575f80fd5b80630f5f6ed711610230578063248a9ca311610216578063248a9ca31461035d5780632f2ff15d1461038b57806336568abe146103aa575f80fd5b80630f5f6ed714610332578063190da59514610347575f80fd5b806301ffc9a71461026157806303ed0ee514610295578063051287bc146102d657806306f333f214610311575b5f80fd5b34801561026c575f80fd5b5061028061027b36600461226a565b6107cd565b60405190151581526020015b60405180910390f35b3480156102a0575f80fd5b506102c87f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d81565b60405190815260200161028c565b3480156102e1575f80fd5b506103046102f03660046122a9565b60056020525f908152604090205460ff1681565b60405161028c91906122ed565b34801561031c575f80fd5b5061033061032b366004612350565b610828565b005b34801561033d575f80fd5b506102c861271081565b348015610352575f80fd5b506102c862093a8081565b348015610368575f80fd5b506102c86103773660046122a9565b5f9081526020819052604090206001015490565b348015610396575f80fd5b506103306103a5366004612387565b6108ed565b3480156103b5575f80fd5b506103306103c4366004612387565b610917565b3480156103d4575f80fd5b506103306103e33660046124cc565b610963565b6103306103f6366004612544565b610b97565b348015610406575f80fd5b506102c860025481565b34801561041b575f80fd5b506102c87fdb9556138406326f00296e13ea2ad7db24ba82381212d816b1a40c23b466b32781565b34801561044e575f80fd5b5061033061045d3660046125e5565b610e9e565b34801561046d575f80fd5b506102c861070881565b348015610482575f80fd5b506102806104913660046122a9565b60076020525f908152604090205460ff1681565b3480156104b0575f80fd5b506103306104bf36600461261f565b611072565b6103306104d23660046125e5565b6111a3565b3480156104e2575f80fd5b506104f66104f1366004612661565b6113e6565b6040516001600160a01b03909116815260200161028c565b348015610519575f80fd5b506105626105283660046122a9565b60066020525f90815260409020546bffffffffffffffffffffffff8116906c0100000000000000000000000090046001600160a01b031682565b604080516bffffffffffffffffffffffff90931683526001600160a01b0390911660208301520161028c565b348015610599575f80fd5b506102806105a8366004612387565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156105db575f80fd5b506102c87fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b34801561060e575f80fd5b506102c85f81565b348015610621575f80fd5b506102c87f000000000000000000000000000000000000000000000000000000000000000081565b348015610654575f80fd5b50610280610663366004612387565b611404565b348015610673575f80fd5b506106876106823660046125e5565b611504565b60405161028c9190612681565b34801561069f575f80fd5b506103306106ae3660046122a9565b611576565b3480156106be575f80fd5b506102c860085481565b3480156106d3575f80fd5b506103306106e23660046122a9565b6116dc565b3480156106f2575f80fd5b506103306107013660046122a9565b6117be565b348015610711575f80fd5b506102c8620f424081565b348015610727575f80fd5b506102c86107363660046122a9565b611826565b348015610746575f80fd5b506102c87f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b348015610779575f80fd5b50610330610788366004612387565b61183c565b348015610798575f80fd5b506102c86107a7366004612767565b60036020525f908152604090205481565b3480156107c3575f80fd5b506102c860045481565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610822575061082282611860565b92915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55610852816118f6565b6001600160a01b0383165f90815260036020526040812054908190036108785750505050565b6001600160a01b0384165f8181526003602052604081205561089b908483611903565b604080516001600160a01b038087168252851660208201529081018290527f244e51bc38c1452fa8aaf487bcb4bca36c2baa3a5fbdb776b1eabd8dc6d277cd9060600160405180910390a1505b505050565b5f82815260208190526040902060010154610907816118f6565b6109118383611a21565b50505050565b6001600160a01b0381163314610959576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6108e88282611a54565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461098d816118f6565b825160208401205f61099e85611504565b905060025f8381526005602052604090205460ff1660048111156109c4576109c46122c0565b146109fb576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c0100000000000000000000000090046001600160a01b03169082018190523314610a7d576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611610aca576040517f1992d0bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600560205260409020805460ff1916600317905561010082015115610b245761010082015160808301516001600160a01b03165f9081526003602052604081208054909190610b1e9084906127af565b90915550505b608082015160c0830151610b426001600160a01b0383168883611903565b604080516001600160a01b03848116825260208201849052891691339188917f582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac67891015b60405180910390a45050505050505050565b46815f015163ffffffff1603610bd9576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08101511580610bec575060c0810151155b15610c23576040517fe38820c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101516001600160a01b03161580610c48575060808101516001600160a01b0316155b15610c7f576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c8b610708426127af565b8161010001511015610cc9576040517f04b7fcc800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610cdd3083606001518460a00151611a7f565b90505f806002541115610d0957620f424060025483610cfc91906127c2565b610d0691906127d9565b90505b610d138183612811565b91505f6040518061018001604052804663ffffffff168152602001855f015163ffffffff16815260200185602001516001600160a01b0316815260200185604001516001600160a01b0316815260200185606001516001600160a01b0316815260200185608001516001600160a01b031681526020018481526020018560c0015181526020018381526020018560e0015115158152602001856101000151815260200160085f815480929190610dc890612824565b909155509052604051610dde9190602001612681565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020808301919091205f8181526005835293909320805460ff191660011790558701518751606089015160808a015160c08b015160e08c015195985095966001600160a01b039094169587957f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a95610e8f958b959094909390928e9261287d565b60405180910390a35050505050565b805160208201205f610eaf83611504565b335f9081527fd2043bf65931af3dbecf60d0db8f40e4160406d7beb00522f4200cf4944a1eb8602052604090205490915060ff1615610f2b578061014001514211610f26576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f77565b62093a80816101400151610f3f91906127af565b4211610f77576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8381526005602052604090205460ff166004811115610f9b57610f9b6122c0565b14610fd2576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82815260056020526040808220805460ff19166004179055820151608083015161010084015160c08501519293919261100c91906127af565b90506110226001600160a01b0383168483611903565b604080516001600160a01b0384811682526020820184905285169187917fb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958910160405180910390a3505050505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461109c816118f6565b8251602084012060015f8281526005602052604090205460ff1660048111156110c7576110c76122c0565b146110fe576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8181526005602090815260408083208054600260ff19909116179055805180820182526bffffffffffffffffffffffff4281168252338285018181528787526006865295849020925195516001600160a01b03166c0100000000000000000000000002959091169490941790555185815283917f4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4910160405180910390a350505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc46111cd816118f6565b815160208301205f6111de84611504565b90504663ffffffff16816020015163ffffffff1614611229576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806101400151421115611268576040517f559895a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526007602052604090205460ff16156112b0576040517fbef7bb7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600760205260409020805460ff19166001179055606081015160a082015160e08301516004546101208501516112f757505f6112f1848484611a7f565b50611368565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b0384160161133b576112f1848461133684866127af565b611a7f565b611346848484611a7f565b506113668473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee83611a7f565b505b845160808087015160a08089015160c0808b015160e08c01516040805163ffffffff90991689526001600160a01b0396871660208a0152938616938801939093526060870152938501528301849052861691339189917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9101610b85565b5f8281526001602052604081206113fd9083611c49565b9392505050565b5f60025f8481526005602052604090205460ff166004811115611429576114296122c0565b14611460576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526001600160a01b036c0100000000000000000000000090910481169183018290528416146114e5576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611949350505050565b60408051610180810182525f8082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e0820181905261010082018190526101208201819052610140820181905261016082015282519091610822918401810190840161292d565b7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d6115a0816118f6565b60025f8381526005602052604090205460ff1660048111156115c4576115c46122c0565b146115fb576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff8082168085526c010000000000000000000000009092046001600160a01b03169390920192909252610708914203161115611689576040517f3e908aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600560209081526040808320805460ff19166001179055600690915280822082905551339184917f0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad49190a35050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f55611706816118f6565b612710821115611777576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e657746656552617465203e206d61780000000000000000000000000000000060448201526064015b60405180910390fd5b600280549083905560408051828152602081018590527f14914da2bf76024616fbe1859783fcd4dbddcb179b1f3a854949fbf920dcb95791015b60405180910390a1505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556117e8816118f6565b600480549083905560408051828152602081018590527f5cf09b12f3f56b4c564d51b25b40360af6d795198adb61ae0806a36c294323fa91016117b1565b5f81815260016020526040812061082290611c54565b5f82815260208190526040902060010154611856816118f6565b6109118383611a54565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061082257507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610822565b6119008133611c5d565b50565b306001600160a01b0383160361191857505050565b805f0361192457505050565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601611a0d575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f811461199d576040519150601f19603f3d011682016040523d82523d5f602084013e6119a2565b606091505b5050905080610911576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c656400000000000000000000000000604482015260640161176e565b6108e86001600160a01b0384168383611ccc565b5f80611a2d8484611d40565b905080156113fd575f848152600160205260409020611a4c9084611de7565b509392505050565b5f80611a608484611dfb565b905080156113fd575f848152600160205260409020611a4c9084611e7c565b5f6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611be357611ab6836001600160a01b0316611e90565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528416906370a0823190602401602060405180830381865afa158015611b13573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b3791906129f7565b9050611b4e6001600160a01b038416338685611f35565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528291908516906370a0823190602401602060405180830381865afa158015611bae573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bd291906129f7565b611bdc9190612811565b90506113fd565b348214611c1c576040517f81de0bf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014611c4057611c406001600160a01b0384168584611903565b50349392505050565b5f6113fd8383611f6e565b5f610822825490565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16611cc8576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b03821660048201526024810183905260440161176e565b5050565b6040516001600160a01b038381166024830152604482018390526108e891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611f94565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16611de0575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611d983390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610822565b505f610822565b5f6113fd836001600160a01b03841661200e565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1615611de0575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610822565b5f6113fd836001600160a01b038416612053565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03821601611ef2576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f03611900576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b0384811660248301528381166044830152606482018390526109119186918216906323b872dd90608401611cf9565b5f825f018281548110611f8357611f83612a0e565b905f5260205f200154905092915050565b5f611fa86001600160a01b03841683612136565b905080515f14158015611fcc575080806020019051810190611fca9190612a3b565b155b156108e8576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b038416600482015260240161176e565b5f818152600183016020526040812054611de057508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610822565b5f818152600183016020526040812054801561212d575f612075600183612811565b85549091505f9061208890600190612811565b90508082146120e7575f865f0182815481106120a6576120a6612a0e565b905f5260205f200154905080875f0184815481106120c6576120c6612a0e565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806120f8576120f8612a56565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610822565b5f915050610822565b60606113fd83835f845f80856001600160a01b0316848660405161215a9190612a83565b5f6040518083038185875af1925050503d805f8114612194576040519150601f19603f3d011682016040523d82523d5f602084013e612199565b606091505b50915091506121a98683836121b3565b9695505050505050565b6060826121c8576121c382612228565b6113fd565b81511580156121df57506001600160a01b0384163b155b15612221576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b038516600482015260240161176e565b50806113fd565b8051156122385780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6020828403121561227a575f80fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146113fd575f80fd5b5f602082840312156122b9575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b6020810160058310612326577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b6001600160a01b0381168114611900575f80fd5b803561234b8161232c565b919050565b5f8060408385031215612361575f80fd5b823561236c8161232c565b9150602083013561237c8161232c565b809150509250929050565b5f8060408385031215612398575f80fd5b82359150602083013561237c8161232c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610120810167ffffffffffffffff811182821017156123fb576123fb6123aa565b60405290565b604051610180810167ffffffffffffffff811182821017156123fb576123fb6123aa565b5f82601f830112612434575f80fd5b813567ffffffffffffffff8082111561244f5761244f6123aa565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612495576124956123aa565b816040528381528660208588010111156124ad575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f80604083850312156124dd575f80fd5b823567ffffffffffffffff8111156124f3575f80fd5b6124ff85828601612425565b925050602083013561237c8161232c565b63ffffffff81168114611900575f80fd5b803561234b81612510565b8015158114611900575f80fd5b803561234b8161252c565b5f6101208284031215612555575f80fd5b61255d6123d7565b61256683612521565b815261257460208401612340565b602082015261258560408401612340565b604082015261259660608401612340565b60608201526125a760808401612340565b608082015260a083013560a082015260c083013560c08201526125cc60e08401612539565b60e0820152610100928301359281019290925250919050565b5f602082840312156125f5575f80fd5b813567ffffffffffffffff81111561260b575f80fd5b61261784828501612425565b949350505050565b5f8060408385031215612630575f80fd5b823567ffffffffffffffff811115612646575f80fd5b61265285828601612425565b95602094909401359450505050565b5f8060408385031215612672575f80fd5b50508035926020909101359150565b815163ffffffff168152610180810160208301516126a7602084018263ffffffff169052565b5060408301516126c260408401826001600160a01b03169052565b5060608301516126dd60608401826001600160a01b03169052565b5060808301516126f860808401826001600160a01b03169052565b5060a083015161271360a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e0830152610100808401518184015250610120808401516127488285018215159052565b5050610140838101519083015261016092830151929091019190915290565b5f60208284031215612777575f80fd5b81356113fd8161232c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561082257610822612782565b808202811582820484141761082257610822612782565b5f8261280c577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561082257610822612782565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361285457612854612782565b5060010190565b5f5b8381101561287557818101518382015260200161285d565b50505f910152565b60e081525f88518060e084015261010061289d8282860160208e0161285b565b63ffffffff9990991660208401526001600160a01b039788166040840152959096166060820152608081019390935260a0830191909152151560c0820152601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190910192915050565b805161234b81612510565b805161234b8161232c565b805161234b8161252c565b5f610180828403121561293e575f80fd5b612946612401565b61294f8361290c565b815261295d6020840161290c565b602082015261296e60408401612917565b604082015261297f60608401612917565b606082015261299060808401612917565b60808201526129a160a08401612917565b60a082015260c083015160c082015260e083015160e08201526101008084015181830152506101206129d4818501612922565b908201526101408381015190820152610160928301519281019290925250919050565b5f60208284031215612a07575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612a4b575f80fd5b81516113fd8161252c565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f8251612a9481846020870161285b565b919091019291505056fea26469706673582212206c1caad206e8ff870920a9526ab75035e8ff4e7e888175fa77aae5149fdff56f64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"56572:10628:0:-:0;;;57685:79;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;57719:6;55515:38;25160:4;57719:6;55515:10;:38::i;:::-;-1:-1:-1;;57747:12:0::1;57733:26;::::0;-1:-1:-1;56572:10628:0;;32852:245;32950:4;;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33014:59;33085:7;-1:-1:-1;32852:245:0;;;;;:::o;28907:290::-;28996:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;-1:-1:-1;;;;;29045:29:0;;;;;;;;;:36;;-1:-1:-1;;29045:36:0;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;-1:-1:-1;;;;;29094:40:0;29112:7;-1:-1:-1;;;;;29094:40:0;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;-1:-1:-1;;;;;12822:23:0;;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;14:290:1;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:1;;214:42;;204:70;;270:1;267;260:12;14:290;56572:10628:0;;;;;;;;;;;;","srcMapRuntime":"56572:10628:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31534:226;;;;;;;;;;-1:-1:-1;31534:226:0;;;;;:::i;:::-;;:::i;:::-;;;612:14:1;;605:22;587:41;;575:2;560:18;31534:226:0;;;;;;;;54914:60;;;;;;;;;;;;54951:23;54914:60;;;;;785:25:1;;;773:2;758:18;54914:60:0;639:177:1;57255:54:0;;;;;;;;;;-1:-1:-1;57255:54:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;55846:349::-;;;;;;;;;;-1:-1:-1;55846:349:0;;;;;:::i;:::-;;:::i;:::-;;55090:45;;;;;;;;;;;;55129:6;55090:45;;56885;;;;;;;;;;;;56924:6;56885:45;;26666:114;;;;;;;;;;-1:-1:-1;26666:114:0;;;;;:::i;:::-;26731:7;26753:12;;;;;;;;;;:22;;;;26666:114;27050:142;;;;;;;;;;-1:-1:-1;27050:142:0;;;;;:::i;:::-;;:::i;28106:237::-;;;;;;;;;;-1:-1:-1;28106:237:0;;;;;:::i;:::-;;:::i;64426:1108::-;;;;;;;;;;-1:-1:-1;64426:1108:0;;;;;:::i;:::-;;:::i;59278:1922::-;;;;;;:::i;:::-;;:::i;55248:30::-;;;;;;;;;;;;;;;;54844:66;;;;;;;;;;;;54884:26;54844:66;;66113:1085;;;;;;;;;;-1:-1:-1;66113:1085:0;;;;;:::i;:::-;;:::i;57013:56::-;;;;;;;;;;;;57059:10;57013:56;;57492:44;;;;;;;;;;-1:-1:-1;57492:44:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;62812:577;;;;;;;;;;-1:-1:-1;62812:577:0;;;;;:::i;:::-;;:::i;61234:1544::-;;;;;;:::i;:::-;;:::i;32319:148::-;;;;;;;;;;-1:-1:-1;32319:148:0;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;7391:55:1;;;7373:74;;7361:2;7346:18;32319:148:0;7227:226:1;57370:51:0;;;;;;;;;;-1:-1:-1;57370:51:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;57370:51:0;;;;;;;7660:26:1;7648:39;;;7630:58;;-1:-1:-1;;;;;7724:55:1;;;7719:2;7704:18;;7697:83;7603:18;57370:51:0;7458:328:1;25760:142:0;;;;;;;;;;-1:-1:-1;25760:142:0;;;;;:::i;:::-;25849:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;;;;25760:142;54776:64;;;;;;;;;;;;54815:25;54776:64;;25115:49;;;;;;;;;;-1:-1:-1;25115:49:0;25160:4;25115:49;;57644:36;;;;;;;;;;;;;;;64019:373;;;;;;;;;;-1:-1:-1;64019:373:0;;;;;:::i;:::-;;:::i;59079:165::-;;;;;;;;;;-1:-1:-1;59079:165:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;65568:511::-;;;;;;;;;;-1:-1:-1;65568:511:0;;;;;:::i;:::-;;:::i;57571:20::-;;;;;;;;;;;;;;;;55562:280;;;;;;;;;;-1:-1:-1;55562:280:0;;;;;:::i;:::-;;:::i;56199:258::-;;;;;;;;;;-1:-1:-1;56199:258:0;;;;;:::i;:::-;;:::i;55049:37::-;;;;;;;;;;;;55083:3;55049:37;;32625:133;;;;;;;;;;-1:-1:-1;32625:133:0;;;;;:::i;:::-;;:::i;54978:66::-;;;;;;;;;;;;55018:26;54978:66;;27448:144;;;;;;;;;;-1:-1:-1;27448:144:0;;;;;:::i;:::-;;:::i;55330:47::-;;;;;;;;;;-1:-1:-1;55330:47:0;;;;;:::i;:::-;;;;;;;;;;;;;;55447:29;;;;;;;;;;;;;;;;31534:226;31627:4;31652:57;;;31667:42;31652:57;;:103;;;31719:36;31743:11;31719:23;:36::i;:::-;31639:116;31534:226;-1:-1:-1;;31534:226:0:o;55846:349::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;-1:-1:-1;;;;;55978:19:0;::::1;55958:17;55978:19:::0;;;:12:::1;:19;::::0;;;;;;56007:14;;;56003:27:::1;;56023:7;55846:349:::0;;;:::o;56003:27::-:1;-1:-1:-1::0;;;;;56067:19:0;::::1;56089:1;56067:19:::0;;;:12:::1;:19;::::0;;;;:23;56096:45:::1;::::0;56120:9;56131;56096:23:::1;:45::i;:::-;56152:38;::::0;;-1:-1:-1;;;;;9986:15:1;;;9968:34;;10038:15;;10033:2;10018:18;;10011:43;10070:18;;;10063:34;;;56152:38:0::1;::::0;9895:2:1;9880:18;56152:38:0::1;;;;;;;55952:243;25400:1;55846:349:::0;;;:::o;27050:142::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27162:25:::1;27173:4;27179:7;27162:10;:25::i;:::-;;27050:142:::0;;;:::o;28106:237::-;-1:-1:-1;;;;;28207:34:0;;19686:10;28207:34;28203:92;;28258:30;;;;;;;;;;;;;;28203:92;28301:37;28313:4;28319:18;28301:11;:37::i;64426:1108::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;64549:18;;::::1;::::0;::::1;::::0;64525:21:::1;64612:29;64559:7:::0;64612:20:::1;:29::i;:::-;64573:68:::0;-1:-1:-1;64751:27:0::1;64718:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:60;::::0;::::1;;;;;;:::i;:::-;;64714:96;;64793:17;;;;;;;;;;;;;;64714:96;64817:24;64844:27:::0;;;:12:::1;:27;::::0;;;;;;;;64817:54;;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;::::1;-1:-1:-1::0;;;;;64817:54:0::1;::::0;;::::1;::::0;;;64898:10:::1;64881:27;64877:57;;64917:17;;;;;;;;;;;;;;64877:57;63959:15:::0;;56783:10:::1;::::0;63940:15;63933:41;63925:49;;64944:35:::1;64940:72;;64988:24;;;;;;;;;;;;;;64940:72;65019:29;::::0;;;:14:::1;:29;::::0;;;;:60;;-1:-1:-1;;65019:60:0::1;65051:28;65019:60;::::0;;65146:27:::1;::::0;::::1;::::0;:31;65142:111:::1;;65226:27;::::0;::::1;::::0;65198:23:::1;::::0;::::1;::::0;-1:-1:-1;;;;;65185:37:0::1;;::::0;;;:12:::1;:37;::::0;;;;:68;;:37;;;:68:::1;::::0;65226:27;;65185:68:::1;:::i;:::-;::::0;;;-1:-1:-1;;65142:111:0::1;65340:23;::::0;::::1;::::0;65386:24:::1;::::0;::::1;::::0;65416:35:::1;-1:-1:-1::0;;;;;65416:23:0;::::1;65440:2:::0;65386:24;65416:23:::1;:35::i;:::-;65463:66;::::0;;-1:-1:-1;;;;;10619:55:1;;;10601:74;;10706:2;10691:18;;10684:34;;;65463:66:0;::::1;::::0;65499:10:::1;::::0;65484:13;;65463:66:::1;::::0;10574:18:1;65463:66:0::1;;;;;;;;64519:1015;;;;;64426:1108:::0;;;:::o;59278:1922::-;59397:13;59376:6;:17;;;:34;;;59372:63;;59419:16;;;;;;;;;;;;;;59372:63;59445:19;;;;:24;;:50;;-1:-1:-1;59473:17:0;;;;:22;59445:50;59441:86;;;59510:17;;;;;;;;;;;;;;59441:86;59537:18;;;;-1:-1:-1;;;;;59537:32:0;;;:66;;-1:-1:-1;59573:16:0;;;;-1:-1:-1;;;;;59573:30:0;;59537:66;59533:98;;;59618:13;;;;;;;;;;;;;;59533:98;59659:37;57059:10;59659:15;:37;:::i;:::-;59641:6;:15;;;:55;59637:92;;;59711:18;;;;;;;;;;;;;;59637:92;59852:20;59875:90;59901:4;59914:6;:18;;;59940:6;:19;;;59875:10;:90::i;:::-;59852:113;;60025:23;60076:1;60058:15;;:19;60054:91;;;55083:3;60119:15;;60104:12;:30;;;;:::i;:::-;60103:42;;;;:::i;:::-;60085:60;;60054:91;60151:31;60167:15;60151:31;;:::i;:::-;;;60287:20;60328:516;;;;;;;;60378:13;60328:516;;;;;;60415:6;:17;;;60328:516;;;;;;60456:6;:13;;;-1:-1:-1;;;;;60328:516:0;;;;;60494:6;:9;;;-1:-1:-1;;;;;60328:516:0;;;;;60526:6;:18;;;-1:-1:-1;;;;;60328:516:0;;;;;60565:6;:16;;;-1:-1:-1;;;;;60328:516:0;;;;;60605:12;60328:516;;;;60639:6;:17;;;60328:516;;;;60683:15;60328:516;;;;60722:6;:19;;;60328:516;;;;;;60761:6;:15;;;60328:516;;;;60793:5;;:7;;;;;;;;;:::i;:::-;;;;-1:-1:-1;60328:516:0;;60310:540;;;;;;;;:::i;:::-;;;;;;;;;;;;;;60880:18;;60310:540;60880:18;;;;;;;60856:21;60904:29;;;:14;:29;;;;;;:54;;-1:-1:-1;;60904:54:0;60936:22;60904:54;;;61014:13;;;61050:17;;61075:18;;;;61101:16;;;;61145:17;;;;61170:19;;;;60310:540;;-1:-1:-1;60880:18:0;;-1:-1:-1;;;;;60970:225:0;;;;60880:18;;60970:225;;;;60310:540;;61050:17;;61075:18;;61101:16;;61125:12;;60970:225;:::i;:::-;;;;;;;;59339:1861;;;;59278:1922;:::o;66113:1085::-;66190:18;;;;;;66166:21;66253:29;66200:7;66253:20;:29::i;:::-;66316:10;25849:4;25868:29;;;:12;;:29;:12;:29;;;66214:68;;-1:-1:-1;25868:29:0;;66289:358;;;66412:11;:20;;;66393:15;:39;66389:73;;66441:21;;;;;;;;;;;;;;66389:73;66289:358;;;56924:6;66567:11;:20;;;:35;;;;:::i;:::-;66548:15;:54;66544:96;;66619:21;;;;;;;;;;;;;;66544:96;66748:22;66715:29;;;;:14;:29;;;;;;;;:55;;;;;;;;:::i;:::-;;66711:91;;66785:17;;;;;;;;;;;;;;66711:91;66808:29;;;;:14;:29;;;;;;:53;;-1:-1:-1;;66808:53:0;66840:21;66808:53;;;66939:24;;;66985:23;;;;67058:27;;;;67031:24;;;;66939;;66985:23;;67031:54;;67058:27;67031:54;:::i;:::-;67014:71;-1:-1:-1;67091:35:0;-1:-1:-1;;;;;67091:23:0;;67115:2;67014:71;67091:23;:35::i;:::-;67138:55;;;-1:-1:-1;;;;;10619:55:1;;;10601:74;;10706:2;10691:18;;10684:34;;;67138:55:0;;;67160:13;;67138:55;;10574:18:1;67138:55:0;;;;;;;66160:1038;;;;;66113:1085;:::o;62812:577::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;62943:18;;::::1;::::0;::::1;::::0;63056:22:::1;63023:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:55;::::0;::::1;;;;;;:::i;:::-;;63019:91;;63093:17;;;;;;;;;;;;;;63019:91;63116:29;::::0;;;:14:::1;:29;::::0;;;;;;;:59;;63148:27:::1;-1:-1:-1::0;;63116:59:0;;::::1;;::::0;;63211:88;;;;::::1;::::0;;::::1;63249:15;63211:88:::0;::::1;::::0;;63282:10:::1;63211:88:::0;;::::1;::::0;;;63181:27;;;:12:::1;:27:::0;;;;;;:118;;;;-1:-1:-1;;;;;63181:118:0::1;::::0;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;63326:58;785:25:1;;;63116:29:0;;63326:58:::1;::::0;758:18:1;63326:58:0::1;;;;;;;62913:476;62812:577:::0;;;:::o;61234:1544::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;61341:18;;::::1;::::0;::::1;::::0;61317:21:::1;61404:29;61351:7:::0;61404:20:::1;:29::i;:::-;61365:68;;61477:13;61443:48;;:11;:23;;;:48;;;61439:83;;61506:16;;;;;;;;;;;;;;61439:83;61610:11;:20;;;61592:15;:38;61588:69;;;61639:18;;;;;;;;;;;;;;61588:69;61710:27;::::0;;;:12:::1;:27;::::0;;;;;::::1;;61706:60;;;61746:20;;;;;;;;;;;;;;61706:60;61772:27;::::0;;;:12:::1;:27;::::0;;;;:34;;-1:-1:-1;;61772:34:0::1;61802:4;61772:34;::::0;;61911:25:::1;::::0;::::1;::::0;61958:21:::1;::::0;::::1;::::0;62002:22:::1;::::0;::::1;::::0;62048:14:::1;::::0;62073:24:::1;::::0;::::1;::::0;62068:457:::1;;-1:-1:-1::0;62139:1:0::1;62148:29;62159:2:::0;62163:5;62170:6;62148:10:::1;:29::i;:::-;;62068:457;;;62194:38:::0;-1:-1:-1;;;;;62194:38:0;::::1;::::0;62190:335:::1;;62302:38;62313:2:::0;62317:5;62324:15:::1;62333:6:::0;62324;:15:::1;:::i;:::-;62302:10;:38::i;62190:335::-;62428:29;62439:2;62443:5;62450:6;62428:10;:29::i;:::-;;62465:53;62476:2;52243:42;62511:6;62465:10;:53::i;:::-;;62190:335;62606:25:::0;;62639:23:::1;::::0;;::::1;::::0;62670:21:::1;::::0;;::::1;::::0;62699:24:::1;::::0;;::::1;::::0;62731:22:::1;::::0;::::1;::::0;62536:237:::1;::::0;;13103:10:1;13091:23;;;13073:42;;-1:-1:-1;;;;;13212:15:1;;;13207:2;13192:18;;13185:43;13264:15;;;13244:18;;;13237:43;;;;13311:2;13296:18;;13289:34;13339:19;;;13332:35;13383:19;;13376:35;;;62536:237:0;::::1;::::0;62578:10:::1;::::0;62557:13;;62536:237:::1;::::0;13045:19:1;62536:237:0::1;12788:629:1::0;32319:148:0;32412:7;32434:18;;;:12;:18;;;;;:28;;32456:5;32434:21;:28::i;:::-;32427:35;32319:148;-1:-1:-1;;;32319:148:0:o;64019:373::-;64112:4;64161:27;64128:29;;;;:14;:29;;;;;;;;:60;;;;;;;;:::i;:::-;;64124:96;;64203:17;;;;;;;;;;;;;;64124:96;64226:24;64253:27;;;:12;:27;;;;;;;;;64226:54;;;;;;;;;;;;;;-1:-1:-1;;;;;64226:54:0;;;;;;;;;;;;64290:24;;;64286:54;;64323:17;;;;;;;;;;;;;;64286:54;63959:15;;56783:10;;63940:15;63933:41;63925:49;;64353:34;;64019:373;-1:-1:-1;;;;64019:373:0:o;59079:165::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;59199:40:0;;-1:-1:-1;;59199:40:0;;;;;;;;;;:::i;65568:511::-;54951:23;25378:16;25389:4;25378:10;:16::i;:::-;65681:27:::1;65648:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:60;::::0;::::1;;;;;;:::i;:::-;;65644:96;;65723:17;;;;;;;;;;;;;;65644:96;65761:27;::::0;;;:12:::1;:27;::::0;;;;;;;;65750:39;;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;;;::::1;-1:-1:-1::0;;;;;65750:39:0::1;::::0;;;::::1;::::0;;;;56783:10:::1;::::0;63940:15;63933:41;63925:49;65750:56:::1;65746:96;;;65821:21;;;;;;;;;;;;;;65746:96;65922:29;::::0;;;:14:::1;:29;::::0;;;;;;;:54;;-1:-1:-1;;65922:54:0::1;65954:22;65922:54;::::0;;65989:12:::1;:27:::0;;;;;;65982:34;;;66028:46;66063:10:::1;::::0;65922:29;;66028:46:::1;::::0;65922:29;66028:46:::1;65568:511:::0;;:::o;55562:280::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;55129:6:::1;55665:10;:26;;55657:55;;;::::0;::::1;::::0;;15233:2:1;55657:55:0::1;::::0;::::1;15215:21:1::0;15272:2;15252:18;;;15245:30;15311:18;15291;;;15284:46;15347:18;;55657:55:0::1;;;;;;;;;55739:15;::::0;;55760:28;;;;55799:38:::1;::::0;;15550:25:1;;;15606:2;15591:18;;15584:34;;;55799:38:0::1;::::0;15523:18:1;55799:38:0::1;;;;;;;;55651:191;55562:280:::0;;:::o;56199:258::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;56328:14:::1;::::0;;56348:34;;;;56393:59:::1;::::0;;15550:25:1;;;15606:2;15591:18;;15584:34;;;56393:59:0::1;::::0;15523:18:1;56393:59:0::1;15376:248:1::0;32625:133:0;32704:7;32726:18;;;:12;:18;;;;;:27;;:25;:27::i;27448:144::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27561:26:::1;27573:4;27579:7;27561:11;:26::i;25465:216::-:0;25558:4;25583:47;;;25598:32;25583:47;;:93;;-1:-1:-1;18903:25:0;18888:40;;;;25640:36;18785:148;26101:97;26163:30;26174:4;19686:10;26163;:30::i;:::-;26101:97;:::o;52518:610::-;52701:4;-1:-1:-1;;;;;52687:19:0;;;52683:32;;52518:610;;;:::o;52683:32::-;52779:5;52788:1;52779:10;52775:23;;52518:610;;;:::o;52775:23::-;52807:20;-1:-1:-1;;;;;52807:20:0;;;52803:321;;52969:12;52987:2;-1:-1:-1;;;;;52987:7:0;53002:5;52987:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52968:44;;;53028:7;53020:39;;;;;;;16041:2:1;53020:39:0;;;16023:21:1;16080:2;16060:18;;;16053:30;16119:21;16099:18;;;16092:49;16158:18;;53020:39:0;15839:343:1;52803:321:0;53080:37;-1:-1:-1;;;;;53080:26:0;;53107:2;53111:5;53080:26;:37::i;32852:245::-;32950:4;32962:12;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33085:7;32852:245;-1:-1:-1;;;32852:245:0:o;33192:250::-;33291:4;33303:12;33318:32;33336:4;33342:7;33318:17;:32::i;:::-;33303:47;;33360:7;33356:62;;;33377:18;;;;:12;:18;;;;;:34;;33403:7;33377:25;:34::i;57942:1103::-;58046:20;-1:-1:-1;;;;;58078:38:0;;52243:42;58078:38;58074:967;;58126:24;:5;-1:-1:-1;;;;;58126:22:0;;:24::i;:::-;58219:34;;;;;-1:-1:-1;;;;;7391:55:1;;;58219:34:0;;;7373:74:1;58219:23:0;;;;;7346:18:1;;58219:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;58204:49;-1:-1:-1;58381:61:0;-1:-1:-1;;;;;58381:30:0;;58412:10;58424:9;58435:6;58381:30;:61::i;:::-;58566:34;;;;;-1:-1:-1;;;;;7391:55:1;;;58566:34:0;;;7373:74:1;58603:12:0;;58566:23;;;;;;7346:18:1;;58566:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;58551:64;;58074:967;;;58721:9;58711:6;:19;58707:51;;58739:19;;;;;;;;;;;;;;58707:51;-1:-1:-1;;;;;58827:26:0;;58848:4;58827:26;58823:82;;58863:42;-1:-1:-1;;;;;58863:23:0;;58887:9;58898:6;58863:23;:42::i;:::-;-1:-1:-1;59025:9:0;57942:1103;;;;;:::o;13914:162::-;14000:7;14046:22;14050:3;14062:5;14046:3;:22::i;13485:109::-;13548:7;13570:19;13578:3;9138:18;;9060:101;26318:181;25849:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;26397:98;;26441:47;;;;;-1:-1:-1;;;;;10619:55:1;;26441:47:0;;;10601:74:1;10691:18;;;10684:34;;;10574:18;;26441:47:0;10427:297:1;26397:98:0;26318:181;;:::o;47628:154::-;47733:43;;-1:-1:-1;;;;;10619:55:1;;;47733:43:0;;;10601:74:1;10691:18;;;10684:34;;;47706:71:0;;47726:5;;47748:14;;;;;10574:18:1;;47733:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47706:19;:71::i;28907:290::-;28996:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;-1:-1:-1;;;;;29045:29:0;;;;;;;;;:36;;-1:-1:-1;;29045:36:0;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;-1:-1:-1;;;;;29094:40:0;29112:7;-1:-1:-1;;;;;29094:40:0;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;-1:-1:-1;;;;;12822:23:0;;12797:4;:50::i;29416:291::-;29506:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29518:185;;;29586:5;29554:12;;;;;;;;;;;-1:-1:-1;;;;;29554:29:0;;;;;;;;;;:37;;-1:-1:-1;;29554:37:0;;;29604:40;19686:10;;29554:12;;29604:40;;29586:5;29604:40;-1:-1:-1;29659:4:0;29652:11;;13006:162;13091:4;13110:53;13118:3;-1:-1:-1;;;;;13138:23:0;;13110:7;:53::i;54246:326::-;54405:38;-1:-1:-1;;;;;54405:38:0;;;54401:69;;54452:18;;;;;;;;;;;;;;54401:69;54518:5;-1:-1:-1;;;;;54518:17:0;;54539:1;54518:22;54514:53;;54549:18;;;;;;;;;;;;;;48011:220;48167:53;;-1:-1:-1;;;;;9986:15:1;;;48167:53:0;;;9968:34:1;10038:15;;;10018:18;;;10011:43;10070:18;;;10063:34;;;48127:99:0;;48154:5;;48182:18;;;;;9880::1;;48167:53:0;9705:398:1;9481:112:0;9548:7;9570:3;:11;;9582:5;9570:18;;;;;;;;:::i;:::-;;;;;;;;;9563:25;;9481:112;;;;:::o;50348:597::-;50751:23;50777:33;-1:-1:-1;;;;;50777:27:0;;50805:4;50777:27;:33::i;:::-;50751:59;;50820:10;:17;50841:1;50820:22;;:57;;;;;50858:10;50847:30;;;;;;;;;;;;:::i;:::-;50846:31;50820:57;50816:125;;;50894:40;;;;;-1:-1:-1;;;;;7391:55:1;;50894:40:0;;;7373:74:1;7346:18;;50894:40:0;7227:226:1;7047:356:0;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;7557:1222;7623:4;7744:21;;;:14;;;:21;;;;;;7776:13;;7772:1003;;8113:18;8134:12;8145:1;8134:8;:12;:::i;:::-;8174:18;;8113:33;;-1:-1:-1;8154:17:0;;8174:22;;8195:1;;8174:22;:::i;:::-;8154:42;;8223:9;8209:10;:23;8205:332;;8244:17;8264:3;:11;;8276:9;8264:22;;;;;;;;:::i;:::-;;;;;;;;;8244:42;;8395:9;8369:3;:11;;8381:10;8369:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;8492:25;;;:14;;;:25;;;;;:36;;;8205:332;8603:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;8694:3;:14;;:21;8709:5;8694:21;;;;;;;;;;;8687:28;;;8731:4;8724:11;;;;;;;7772:1003;8763:5;8756:12;;;;;36664:157;36751:12;36778:38;36800:6;36808:4;36814:1;36751:12;37364;37378:23;37405:6;-1:-1:-1;;;;;37405:11:0;37424:5;37431:4;37405:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37363:73;;;;37449:55;37476:6;37484:7;37493:10;37449:26;:55::i;:::-;37442:62;37125:384;-1:-1:-1;;;;;;37125:384:0:o;38534:510::-;38664:12;38689:7;38684:356;;38706:19;38714:10;38706:7;:19::i;:::-;38684:356;;;38908:17;;:22;:49;;;;-1:-1:-1;;;;;;38934:18:0;;;:23;38908:49;38904:105;;;38976:24;;;;;-1:-1:-1;;;;;7391:55:1;;38976:24:0;;;7373:74:1;7346:18;;38976:24:0;7227:226:1;38904:105:0;-1:-1:-1;39023:10:0;39016:17;;39548:452;39671:17;;:21;39667:329;;39873:10;39867:17;39921:15;39908:10;39904:2;39900:19;39893:44;39667:329;39972:17;;;;;;;;;;;;;;14:332:1;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;821:180;880:6;933:2;921:9;912:7;908:23;904:32;901:52;;;949:1;946;939:12;901:52;-1:-1:-1;972:23:1;;821:180;-1:-1:-1;821:180:1:o;1006:184::-;1058:77;1055:1;1048:88;1155:4;1152:1;1145:15;1179:4;1176:1;1169:15;1195:402;1344:2;1329:18;;1377:1;1366:13;;1356:201;;1413:77;1410:1;1403:88;1514:4;1511:1;1504:15;1542:4;1539:1;1532:15;1356:201;1566:25;;;1195:402;:::o;1602:154::-;-1:-1:-1;;;;;1681:5:1;1677:54;1670:5;1667:65;1657:93;;1746:1;1743;1736:12;1761:134;1829:20;;1858:31;1829:20;1858:31;:::i;:::-;1761:134;;;:::o;1900:388::-;1968:6;1976;2029:2;2017:9;2008:7;2004:23;2000:32;1997:52;;;2045:1;2042;2035:12;1997:52;2084:9;2071:23;2103:31;2128:5;2103:31;:::i;:::-;2153:5;-1:-1:-1;2210:2:1;2195:18;;2182:32;2223:33;2182:32;2223:33;:::i;:::-;2275:7;2265:17;;;1900:388;;;;;:::o;2475:315::-;2543:6;2551;2604:2;2592:9;2583:7;2579:23;2575:32;2572:52;;;2620:1;2617;2610:12;2572:52;2656:9;2643:23;2633:33;;2716:2;2705:9;2701:18;2688:32;2729:31;2754:5;2729:31;:::i;2795:184::-;2847:77;2844:1;2837:88;2944:4;2941:1;2934:15;2968:4;2965:1;2958:15;2984:252;3056:2;3050:9;3098:3;3086:16;;3132:18;3117:34;;3153:22;;;3114:62;3111:88;;;3179:18;;:::i;:::-;3215:2;3208:22;2984:252;:::o;3241:247::-;3308:2;3302:9;3350:3;3338:16;;3384:18;3369:34;;3405:22;;;3366:62;3363:88;;;3431:18;;:::i;3493:777::-;3535:5;3588:3;3581:4;3573:6;3569:17;3565:27;3555:55;;3606:1;3603;3596:12;3555:55;3642:6;3629:20;3668:18;3705:2;3701;3698:10;3695:36;;;3711:18;;:::i;:::-;3845:2;3839:9;3907:4;3899:13;;3750:66;3895:22;;;3919:2;3891:31;3887:40;3875:53;;;3943:18;;;3963:22;;;3940:46;3937:72;;;3989:18;;:::i;:::-;4029:10;4025:2;4018:22;4064:2;4056:6;4049:18;4110:3;4103:4;4098:2;4090:6;4086:15;4082:26;4079:35;4076:55;;;4127:1;4124;4117:12;4076:55;4191:2;4184:4;4176:6;4172:17;4165:4;4157:6;4153:17;4140:54;4238:1;4231:4;4226:2;4218:6;4214:15;4210:26;4203:37;4258:6;4249:15;;;;;;3493:777;;;;:::o;4275:455::-;4352:6;4360;4413:2;4401:9;4392:7;4388:23;4384:32;4381:52;;;4429:1;4426;4419:12;4381:52;4469:9;4456:23;4502:18;4494:6;4491:30;4488:50;;;4534:1;4531;4524:12;4488:50;4557:49;4598:7;4589:6;4578:9;4574:22;4557:49;:::i;:::-;4547:59;;;4656:2;4645:9;4641:18;4628:32;4669:31;4694:5;4669:31;:::i;4735:121::-;4820:10;4813:5;4809:22;4802:5;4799:33;4789:61;;4846:1;4843;4836:12;4861:132;4928:20;;4957:30;4928:20;4957:30;:::i;4998:118::-;5084:5;5077:13;5070:21;5063:5;5060:32;5050:60;;5106:1;5103;5096:12;5121:128;5186:20;;5215:28;5186:20;5215:28;:::i;5254:865::-;5342:6;5395:3;5383:9;5374:7;5370:23;5366:33;5363:53;;;5412:1;5409;5402:12;5363:53;5438:22;;:::i;:::-;5483:28;5501:9;5483:28;:::i;:::-;5476:5;5469:43;5544:38;5578:2;5567:9;5563:18;5544:38;:::i;:::-;5539:2;5532:5;5528:14;5521:62;5615:38;5649:2;5638:9;5634:18;5615:38;:::i;:::-;5610:2;5603:5;5599:14;5592:62;5686:38;5720:2;5709:9;5705:18;5686:38;:::i;:::-;5681:2;5674:5;5670:14;5663:62;5758:39;5792:3;5781:9;5777:19;5758:39;:::i;:::-;5752:3;5745:5;5741:15;5734:64;5859:3;5848:9;5844:19;5831:33;5825:3;5818:5;5814:15;5807:58;5926:3;5915:9;5911:19;5898:33;5892:3;5885:5;5881:15;5874:58;5965:36;5996:3;5985:9;5981:19;5965:36;:::i;:::-;5959:3;5948:15;;5941:61;6021:3;6069:18;;;6056:32;6040:14;;;6033:56;;;;-1:-1:-1;5952:5:1;5254:865;-1:-1:-1;5254:865:1:o;6124:320::-;6192:6;6245:2;6233:9;6224:7;6220:23;6216:32;6213:52;;;6261:1;6258;6251:12;6213:52;6301:9;6288:23;6334:18;6326:6;6323:30;6320:50;;;6366:1;6363;6356:12;6320:50;6389:49;6430:7;6421:6;6410:9;6406:22;6389:49;:::i;:::-;6379:59;6124:320;-1:-1:-1;;;;6124:320:1:o;6449:388::-;6526:6;6534;6587:2;6575:9;6566:7;6562:23;6558:32;6555:52;;;6603:1;6600;6593:12;6555:52;6643:9;6630:23;6676:18;6668:6;6665:30;6662:50;;;6708:1;6705;6698:12;6662:50;6731:49;6772:7;6763:6;6752:9;6748:22;6731:49;:::i;:::-;6721:59;6827:2;6812:18;;;;6799:32;;-1:-1:-1;;;;6449:388:1:o;6842:248::-;6910:6;6918;6971:2;6959:9;6950:7;6946:23;6942:32;6939:52;;;6987:1;6984;6977:12;6939:52;-1:-1:-1;;7010:23:1;;;7080:2;7065:18;;;7052:32;;-1:-1:-1;6842:248:1:o;7890:1373::-;8121:13;;7867:10;7856:22;7844:35;;8090:3;8075:19;;8193:4;8185:6;8181:17;8175:24;8208:53;8255:4;8244:9;8240:20;8226:12;7867:10;7856:22;7844:35;;7791:94;8208:53;;8310:4;8302:6;8298:17;8292:24;8325:56;8375:4;8364:9;8360:20;8344:14;-1:-1:-1;;;;;7161:54:1;7149:67;;7095:127;8325:56;;8430:4;8422:6;8418:17;8412:24;8445:56;8495:4;8484:9;8480:20;8464:14;-1:-1:-1;;;;;7161:54:1;7149:67;;7095:127;8445:56;;8550:4;8542:6;8538:17;8532:24;8565:56;8615:4;8604:9;8600:20;8584:14;-1:-1:-1;;;;;7161:54:1;7149:67;;7095:127;8565:56;;8670:4;8662:6;8658:17;8652:24;8685:56;8735:4;8724:9;8720:20;8704:14;-1:-1:-1;;;;;7161:54:1;7149:67;;7095:127;8685:56;;8797:4;8789:6;8785:17;8779:24;8772:4;8761:9;8757:20;8750:54;8860:4;8852:6;8848:17;8842:24;8835:4;8824:9;8820:20;8813:54;8886:6;8946:2;8938:6;8934:15;8928:22;8923:2;8912:9;8908:18;8901:50;;8970:6;9025:2;9017:6;9013:15;9007:22;9038:51;9085:2;9074:9;9070:18;9054:14;421:13;414:21;402:34;;351:91;9038:51;-1:-1:-1;;9108:6:1;9156:15;;;9150:22;9130:18;;;9123:50;9192:6;9240:15;;;9234:22;9214:18;;;;9207:50;;;;7890:1373;:::o;9453:247::-;9512:6;9565:2;9553:9;9544:7;9540:23;9536:32;9533:52;;;9581:1;9578;9571:12;9533:52;9620:9;9607:23;9639:31;9664:5;9639:31;:::i;10108:184::-;10160:77;10157:1;10150:88;10257:4;10254:1;10247:15;10281:4;10278:1;10271:15;10297:125;10362:9;;;10383:10;;;10380:36;;;10396:18;;:::i;10729:168::-;10802:9;;;10833;;10850:15;;;10844:22;;10830:37;10820:71;;10871:18;;:::i;10902:274::-;10942:1;10968;10958:189;;11003:77;11000:1;10993:88;11104:4;11101:1;11094:15;11132:4;11129:1;11122:15;10958:189;-1:-1:-1;11161:9:1;;10902:274::o;11181:128::-;11248:9;;;11269:11;;;11266:37;;;11283:18;;:::i;11314:195::-;11353:3;11384:66;11377:5;11374:77;11371:103;;11454:18;;:::i;:::-;-1:-1:-1;11501:1:1;11490:13;;11314:195::o;11514:250::-;11599:1;11609:113;11623:6;11620:1;11617:13;11609:113;;;11699:11;;;11693:18;11680:11;;;11673:39;11645:2;11638:10;11609:113;;;-1:-1:-1;;11756:1:1;11738:16;;11731:27;11514:250::o;11769:1014::-;12076:3;12065:9;12058:22;12039:4;12109:6;12103:13;12153:6;12147:3;12136:9;12132:19;12125:35;12179:3;12191:81;12265:6;12260:2;12249:9;12245:18;12238:4;12230:6;12226:17;12191:81;:::i;:::-;12452:10;12440:23;;;;12433:4;12418:20;;12411:53;-1:-1:-1;;;;;12561:15:1;;;12556:2;12541:18;;12534:43;12613:15;;;;12608:2;12593:18;;12586:43;12660:3;12645:19;;12638:35;;;;12704:3;12689:19;;12682:35;;;;12761:14;12754:22;12748:3;12733:19;;12726:51;12324:2;12312:15;;;-1:-1:-1;12308:88:1;12293:104;12289:113;;;;;-1:-1:-1;;11769:1014:1:o;13422:136::-;13500:13;;13522:30;13500:13;13522:30;:::i;13563:138::-;13642:13;;13664:31;13642:13;13664:31;:::i;13706:132::-;13782:13;;13804:28;13782:13;13804:28;:::i;13843:1183::-;13946:6;13999:3;13987:9;13978:7;13974:23;13970:33;13967:53;;;14016:1;14013;14006:12;13967:53;14042:17;;:::i;:::-;14082:39;14111:9;14082:39;:::i;:::-;14075:5;14068:54;14154:48;14198:2;14187:9;14183:18;14154:48;:::i;:::-;14149:2;14142:5;14138:14;14131:72;14235:49;14280:2;14269:9;14265:18;14235:49;:::i;:::-;14230:2;14223:5;14219:14;14212:73;14317:49;14362:2;14351:9;14347:18;14317:49;:::i;:::-;14312:2;14305:5;14301:14;14294:73;14400:50;14445:3;14434:9;14430:19;14400:50;:::i;:::-;14394:3;14387:5;14383:15;14376:75;14484:50;14529:3;14518:9;14514:19;14484:50;:::i;:::-;14478:3;14471:5;14467:15;14460:75;14589:3;14578:9;14574:19;14568:26;14562:3;14555:5;14551:15;14544:51;14649:3;14638:9;14634:19;14628:26;14622:3;14615:5;14611:15;14604:51;14674:3;14730:2;14719:9;14715:18;14709:25;14704:2;14697:5;14693:14;14686:49;;14754:3;14789:46;14831:2;14820:9;14816:18;14789:46;:::i;:::-;14773:14;;;14766:70;14855:3;14896:18;;;14890:25;14874:14;;;14867:49;14935:3;14976:18;;;14970:25;14954:14;;;14947:49;;;;-1:-1:-1;14777:5:1;13843:1183;-1:-1:-1;13843:1183:1:o;16187:184::-;16257:6;16310:2;16298:9;16289:7;16285:23;16281:32;16278:52;;;16326:1;16323;16316:12;16278:52;-1:-1:-1;16349:16:1;;16187:184;-1:-1:-1;16187:184:1:o;16678:::-;16730:77;16727:1;16720:88;16827:4;16824:1;16817:15;16851:4;16848:1;16841:15;16867:245;16934:6;16987:2;16975:9;16966:7;16962:23;16958:32;16955:52;;;17003:1;17000;16993:12;16955:52;17035:9;17029:16;17054:28;17076:5;17054:28;:::i;17117:184::-;17169:77;17166:1;17159:88;17266:4;17263:1;17256:15;17290:4;17287:1;17280:15;17306:287;17435:3;17473:6;17467:13;17489:66;17548:6;17543:3;17536:4;17528:6;17524:17;17489:66;:::i;:::-;17571:16;;;;;17306:287;-1:-1:-1;;17306:287:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"AmountIncorrect","type":"error"},{"inputs":[],"name":"ChainIncorrect","type":"error"},{"inputs":[],"name":"DeadlineExceeded","type":"error"},{"inputs":[],"name":"DeadlineNotExceeded","type":"error"},{"inputs":[],"name":"DeadlineTooShort","type":"error"},{"inputs":[],"name":"DisputePeriodNotPassed","type":"error"},{"inputs":[],"name":"DisputePeriodPassed","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"MsgValueIncorrect","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"SenderIncorrect","type":"error"},{"inputs":[],"name":"StatusIncorrect","type":"error"},{"inputs":[],"name":"TokenNotContract","type":"error"},{"inputs":[],"name":"TransactionRelayed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"}],"name":"BridgeProofDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"transactionHash","type":"bytes32"}],"name":"BridgeProofProvided","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint32","name":"originChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"chainGasAmount","type":"uint256"}],"name":"BridgeRelayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bytes","name":"request","type":"bytes"},{"indexed":false,"internalType":"uint32","name":"destChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"sendChainGas","type":"bool"}],"name":"BridgeRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldChainGasAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"ChainGasAmountUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFeeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"FeeRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeesSwept","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DISPUTE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_BPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_RATE_MAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GUARD_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DEADLINE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFUNDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFUND_DELAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"dstChainId","type":"uint32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct IFastBridge.BridgeParams","name":"params","type":"tuple"}],"name":"bridge","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeProofs","outputs":[{"internalType":"uint96","name":"timestamp","type":"uint96"},{"internalType":"address","name":"relayer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeRelays","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeStatuses","outputs":[{"internalType":"enum FastBridge.BridgeStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"relayer","type":"address"}],"name":"canClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainGasAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"address","name":"to","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deployBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"dispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"getBridgeTransaction","outputs":[{"components":[{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"destChainId","type":"uint32"},{"internalType":"address","name":"originSender","type":"address"},{"internalType":"address","name":"destRecipient","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"uint256","name":"originFeeAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct IFastBridge.BridgeTransaction","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFeeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"protocolFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"bytes32","name":"destTxHash","type":"bytes32"}],"name":"prove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"relay","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"setChainGasAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"setProtocolFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"DISPUTE_PERIOD()":{"notice":"Dispute period for relayed transactions"},"MIN_DEADLINE_PERIOD()":{"notice":"Minimum deadline period to relay a requested bridge transaction"},"REFUND_DELAY()":{"notice":"Delay for a transaction after which it could be permisionlessly refunded"},"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"notice":"Initiates bridge on origin chain to be relayed by off-chain relayer"},"bridgeProofs(bytes32)":{"notice":"Proof of relayed bridge tx on origin chain"},"bridgeRelays(bytes32)":{"notice":"Whether bridge has been relayed on destination chain"},"bridgeStatuses(bytes32)":{"notice":"Status of the bridge tx on origin chain"},"canClaim(bytes32,address)":{"notice":"Checks if the dispute period has passed so bridge deposit can be claimed"},"chainGasAmount()":{"notice":"Chain gas amount to forward as rebate if requested"},"claim(bytes,address)":{"notice":"Completes bridge transaction on origin chain by claiming originally deposited capital"},"dispute(bytes32)":{"notice":"Disputes an outstanding proof in case relayer provided dest chain tx is invalid"},"getBridgeTransaction(bytes)":{"notice":"Decodes bridge request into a bridge transaction"},"protocolFeeRate()":{"notice":"Protocol fee rate taken on origin amount deposited in origin chain"},"protocolFees(address)":{"notice":"Protocol fee amounts accumulated"},"prove(bytes,bytes32)":{"notice":"Provides proof on origin side that relayer provided funds on destination side of bridge transaction"},"refund(bytes)":{"notice":"Refunds an outstanding bridge transaction in case optimistic bridging failed"},"relay(bytes)":{"notice":"Relays destination side of bridge transaction by off-chain relayer"}},"version":1},"developerDoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC20 token failed."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"params":{"params":"The parameters required to bridge"}},"canClaim(bytes32,address)":{"params":{"relayer":"The address of the relayer attempting to claim","transactionId":"The transaction id associated with the encoded bridge transaction to check"}},"claim(bytes,address)":{"params":{"request":"The encoded bridge transaction to claim on origin chain","to":"The recipient address of the funds"}},"dispute(bytes32)":{"params":{"transactionId":"The transaction id associated with the encoded bridge transaction to dispute"}},"getBridgeTransaction(bytes)":{"params":{"request":"The bridge request to decode"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"prove(bytes,bytes32)":{"params":{"destTxHash":"The destination tx hash proving bridge transaction was relayed","request":"The encoded bridge transaction to prove on origin chain"}},"refund(bytes)":{"params":{"request":"The encoded bridge transaction to refund"}},"relay(bytes)":{"params":{"request":"The encoded bridge transaction to relay on destination chain"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"stateVariables":{"nonce":{"details":"to prevent replays"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineNotExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgValueIncorrect\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StatusIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionRelayed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BridgeProofDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeProofProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainGasAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChainGasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"ChainGasAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPUTE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEADLINE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUND_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeProofs\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"timestamp\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeRelays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeStatuses\",\"outputs\":[{\"internalType\":\"enum FastBridge.BridgeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"setChainGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"params\":{\"params\":\"The parameters required to bridge\"}},\"canClaim(bytes32,address)\":{\"params\":{\"relayer\":\"The address of the relayer attempting to claim\",\"transactionId\":\"The transaction id associated with the encoded bridge transaction to check\"}},\"claim(bytes,address)\":{\"params\":{\"request\":\"The encoded bridge transaction to claim on origin chain\",\"to\":\"The recipient address of the funds\"}},\"dispute(bytes32)\":{\"params\":{\"transactionId\":\"The transaction id associated with the encoded bridge transaction to dispute\"}},\"getBridgeTransaction(bytes)\":{\"params\":{\"request\":\"The bridge request to decode\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"prove(bytes,bytes32)\":{\"params\":{\"destTxHash\":\"The destination tx hash proving bridge transaction was relayed\",\"request\":\"The encoded bridge transaction to prove on origin chain\"}},\"refund(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to refund\"}},\"relay(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to relay on destination chain\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"nonce\":{\"details\":\"to prevent replays\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DISPUTE_PERIOD()\":{\"notice\":\"Dispute period for relayed transactions\"},\"MIN_DEADLINE_PERIOD()\":{\"notice\":\"Minimum deadline period to relay a requested bridge transaction\"},\"REFUND_DELAY()\":{\"notice\":\"Delay for a transaction after which it could be permisionlessly refunded\"},\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"notice\":\"Initiates bridge on origin chain to be relayed by off-chain relayer\"},\"bridgeProofs(bytes32)\":{\"notice\":\"Proof of relayed bridge tx on origin chain\"},\"bridgeRelays(bytes32)\":{\"notice\":\"Whether bridge has been relayed on destination chain\"},\"bridgeStatuses(bytes32)\":{\"notice\":\"Status of the bridge tx on origin chain\"},\"canClaim(bytes32,address)\":{\"notice\":\"Checks if the dispute period has passed so bridge deposit can be claimed\"},\"chainGasAmount()\":{\"notice\":\"Chain gas amount to forward as rebate if requested\"},\"claim(bytes,address)\":{\"notice\":\"Completes bridge transaction on origin chain by claiming originally deposited capital\"},\"dispute(bytes32)\":{\"notice\":\"Disputes an outstanding proof in case relayer provided dest chain tx is invalid\"},\"getBridgeTransaction(bytes)\":{\"notice\":\"Decodes bridge request into a bridge transaction\"},\"protocolFeeRate()\":{\"notice\":\"Protocol fee rate taken on origin amount deposited in origin chain\"},\"protocolFees(address)\":{\"notice\":\"Protocol fee amounts accumulated\"},\"prove(bytes,bytes32)\":{\"notice\":\"Provides proof on origin side that relayer provided funds on destination side of bridge transaction\"},\"refund(bytes)\":{\"notice\":\"Refunds an outstanding bridge transaction in case optimistic bridging failed\"},\"relay(bytes)\":{\"notice\":\"Relays destination side of bridge transaction by off-chain relayer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"FastBridge\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","DISPUTE_PERIOD()":"a5bbe22b","FEE_BPS()":"bf333f2c","FEE_RATE_MAX()":"0f5f6ed7","GOVERNOR_ROLE()":"ccc57490","GUARD_ROLE()":"03ed0ee5","MIN_DEADLINE_PERIOD()":"820688d5","REFUNDER_ROLE()":"5960ccf2","REFUND_DELAY()":"190da595","RELAYER_ROLE()":"926d7d7f","bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":"45851694","bridgeProofs(bytes32)":"91ad5039","bridgeRelays(bytes32)":"8379a24f","bridgeStatuses(bytes32)":"051287bc","canClaim(bytes32,address)":"aa9641ab","chainGasAmount()":"e00a83e0","claim(bytes,address)":"41fcb612","deployBlock()":"a3ec191a","dispute(bytes32)":"add98c70","getBridgeTransaction(bytes)":"ac11fb1a","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","nonce()":"affed0e0","protocolFeeRate()":"58f85880","protocolFees(address)":"dcf844a7","prove(bytes,bytes32)":"886d36ff","refund(bytes)":"5eb7d946","relay(bytes)":"8f0d6f17","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setChainGasAmount(uint256)":"b250fe6b","setProtocolFeeRate(uint256)":"b13aa2d6","supportsInterface(bytes4)":"01ffc9a7","sweepProtocolFees(address,address)":"06f333f2"}},"solidity/TestSynapseRFQV2_flat.sol:IAccessControl":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IAccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"solidity/TestSynapseRFQV2_flat.sol:IAccessControlEnumerable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"External interface of AccessControlEnumerable declared to support ERC165 detection.","errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControlEnumerable declared to support ERC165 detection.\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IAccessControlEnumerable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"solidity/TestSynapseRFQV2_flat.sol:IAdmin":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldChainGasAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"ChainGasAmountUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFeeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"FeeRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeesSwept","type":"event"},{"inputs":[{"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"setChainGasAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"setProtocolFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChainGasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"ChainGasAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesSwept\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"setChainGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IAdmin\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"setChainGasAmount(uint256)":"b250fe6b","setProtocolFeeRate(uint256)":"b13aa2d6","sweepProtocolFees(address,address)":"06f333f2"}},"solidity/TestSynapseRFQV2_flat.sol:IERC165":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"supportsInterface(bytes4)":"01ffc9a7"}},"solidity/TestSynapseRFQV2_flat.sol:IERC20":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"solidity/TestSynapseRFQV2_flat.sol:IERC20Permit":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"solidity/TestSynapseRFQV2_flat.sol:IFastBridge":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"}],"name":"BridgeProofDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"transactionHash","type":"bytes32"}],"name":"BridgeProofProvided","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint32","name":"originChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"chainGasAmount","type":"uint256"}],"name":"BridgeRelayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bytes","name":"request","type":"bytes"},{"indexed":false,"internalType":"uint32","name":"destChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"sendChainGas","type":"bool"}],"name":"BridgeRequested","type":"event"},{"inputs":[{"components":[{"internalType":"uint32","name":"dstChainId","type":"uint32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct IFastBridge.BridgeParams","name":"params","type":"tuple"}],"name":"bridge","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"relayer","type":"address"}],"name":"canClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"address","name":"to","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"dispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"getBridgeTransaction","outputs":[{"components":[{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"destChainId","type":"uint32"},{"internalType":"address","name":"originSender","type":"address"},{"internalType":"address","name":"destRecipient","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"uint256","name":"originFeeAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct IFastBridge.BridgeTransaction","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"bytes32","name":"destTxHash","type":"bytes32"}],"name":"prove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"relay","outputs":[],"stateMutability":"payable","type":"function"}],"userDoc":{"kind":"user","methods":{"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"notice":"Initiates bridge on origin chain to be relayed by off-chain relayer"},"canClaim(bytes32,address)":{"notice":"Checks if the dispute period has passed so bridge deposit can be claimed"},"claim(bytes,address)":{"notice":"Completes bridge transaction on origin chain by claiming originally deposited capital"},"dispute(bytes32)":{"notice":"Disputes an outstanding proof in case relayer provided dest chain tx is invalid"},"getBridgeTransaction(bytes)":{"notice":"Decodes bridge request into a bridge transaction"},"prove(bytes,bytes32)":{"notice":"Provides proof on origin side that relayer provided funds on destination side of bridge transaction"},"refund(bytes)":{"notice":"Refunds an outstanding bridge transaction in case optimistic bridging failed"},"relay(bytes)":{"notice":"Relays destination side of bridge transaction by off-chain relayer"}},"version":1},"developerDoc":{"kind":"dev","methods":{"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"params":{"params":"The parameters required to bridge"}},"canClaim(bytes32,address)":{"params":{"relayer":"The address of the relayer attempting to claim","transactionId":"The transaction id associated with the encoded bridge transaction to check"}},"claim(bytes,address)":{"params":{"request":"The encoded bridge transaction to claim on origin chain","to":"The recipient address of the funds"}},"dispute(bytes32)":{"params":{"transactionId":"The transaction id associated with the encoded bridge transaction to dispute"}},"getBridgeTransaction(bytes)":{"params":{"request":"The bridge request to decode"}},"prove(bytes,bytes32)":{"params":{"destTxHash":"The destination tx hash proving bridge transaction was relayed","request":"The encoded bridge transaction to prove on origin chain"}},"refund(bytes)":{"params":{"request":"The encoded bridge transaction to refund"}},"relay(bytes)":{"params":{"request":"The encoded bridge transaction to relay on destination chain"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BridgeProofDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeProofProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainGasAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"params\":{\"params\":\"The parameters required to bridge\"}},\"canClaim(bytes32,address)\":{\"params\":{\"relayer\":\"The address of the relayer attempting to claim\",\"transactionId\":\"The transaction id associated with the encoded bridge transaction to check\"}},\"claim(bytes,address)\":{\"params\":{\"request\":\"The encoded bridge transaction to claim on origin chain\",\"to\":\"The recipient address of the funds\"}},\"dispute(bytes32)\":{\"params\":{\"transactionId\":\"The transaction id associated with the encoded bridge transaction to dispute\"}},\"getBridgeTransaction(bytes)\":{\"params\":{\"request\":\"The bridge request to decode\"}},\"prove(bytes,bytes32)\":{\"params\":{\"destTxHash\":\"The destination tx hash proving bridge transaction was relayed\",\"request\":\"The encoded bridge transaction to prove on origin chain\"}},\"refund(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to refund\"}},\"relay(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to relay on destination chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"notice\":\"Initiates bridge on origin chain to be relayed by off-chain relayer\"},\"canClaim(bytes32,address)\":{\"notice\":\"Checks if the dispute period has passed so bridge deposit can be claimed\"},\"claim(bytes,address)\":{\"notice\":\"Completes bridge transaction on origin chain by claiming originally deposited capital\"},\"dispute(bytes32)\":{\"notice\":\"Disputes an outstanding proof in case relayer provided dest chain tx is invalid\"},\"getBridgeTransaction(bytes)\":{\"notice\":\"Decodes bridge request into a bridge transaction\"},\"prove(bytes,bytes32)\":{\"notice\":\"Provides proof on origin side that relayer provided funds on destination side of bridge transaction\"},\"refund(bytes)\":{\"notice\":\"Refunds an outstanding bridge transaction in case optimistic bridging failed\"},\"relay(bytes)\":{\"notice\":\"Relays destination side of bridge transaction by off-chain relayer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"IFastBridge\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":"45851694","canClaim(bytes32,address)":"aa9641ab","claim(bytes,address)":"41fcb612","dispute(bytes32)":"add98c70","getBridgeTransaction(bytes)":"ac11fb1a","prove(bytes,bytes32)":"886d36ff","refund(bytes)":"5eb7d946","relay(bytes)":"8f0d6f17"}},"solidity/TestSynapseRFQV2_flat.sol:SafeERC20":{"code":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b3639b51cddbc93d15b9c3d1489c438f3b0e5519c0bad91021f9eebfc889277b64736f6c63430008140033","runtime-code":"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b3639b51cddbc93d15b9c3d1489c438f3b0e5519c0bad91021f9eebfc889277b64736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"47088:4928:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;47088:4928:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"47088:4928:0:-:0;;;;;;;;","abiDefinition":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","errors":{"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)":[{"details":"Indicates a failed `decreaseAllowance` request."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC20 token failed."}]},"kind":"dev","methods":{},"title":"SafeERC20","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{}},"solidity/TestSynapseRFQV2_flat.sol:TestFastBridge":{"code":"0x60a060405234801562000010575f80fd5b5060405162002f8638038062002f8683398101604081905262000033916200018d565b8080620000415f8262000050565b50504360805250620001b59050565b5f806200005e84846200008b565b9050801562000082575f84815260016020526040902062000080908462000136565b505b90505b92915050565b5f828152602081815260408083206001600160a01b038516845290915281205460ff166200012e575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055620000e53390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a450600162000085565b505f62000085565b5f62000082836001600160a01b0384165f8181526001830160205260408120546200012e57508154600181810184555f84815260208082209093018490558454848252828601909352604090209190915562000085565b5f602082840312156200019e575f80fd5b81516001600160a01b038116811462000082575f80fd5b608051612db8620001ce5f395f61067a0152612db85ff3fe608060405260043610610291575f3560e01c80639010d07c11610165578063affed0e0116100c6578063ccc574901161007c578063d547741f11610062578063d547741f146107e0578063dcf844a7146107ff578063e00a83e01461082a575f80fd5b8063ccc574901461078e578063d3504844146107c1575f80fd5b8063b250fe6b116100ac578063b250fe6b1461073a578063bf333f2c14610759578063ca15c8731461076f575f80fd5b8063affed0e014610706578063b13aa2d61461071b575f80fd5b8063a3ec191a1161011b578063aa9641ab11610101578063aa9641ab1461069c578063ac11fb1a146106bb578063add98c70146106e7575f80fd5b8063a3ec191a14610669578063a5bbe22b146104b5575f80fd5b806391d148541161014b57806391d14854146105e1578063926d7d7f14610623578063a217fddf14610656575f80fd5b80639010d07c1461052a57806391ad503914610561575f80fd5b806336568abe1161020f5780635eb7d946116101c55780638379a24f116101ab5780638379a24f146104ca578063886d36ff146104f85780638f0d6f1714610517575f80fd5b80635eb7d94614610496578063820688d5146104b5575f80fd5b806345851694116101f5578063458516941461043b57806358f858801461044e5780635960ccf214610463575f80fd5b806336568abe146103fd57806341fcb6121461041c575f80fd5b80630f5f6ed71161026457806323f83f7a1161024a57806323f83f7a14610391578063248a9ca3146103b05780632f2ff15d146103de575f80fd5b80630f5f6ed714610366578063190da5951461037b575f80fd5b806301ffc9a71461029557806303ed0ee5146102c9578063051287bc1461030a57806306f333f214610345575b5f80fd5b3480156102a0575f80fd5b506102b46102af36600461242a565b61083f565b60405190151581526020015b60405180910390f35b3480156102d4575f80fd5b506102fc7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d81565b6040519081526020016102c0565b348015610315575f80fd5b50610338610324366004612469565b60056020525f908152604090205460ff1681565b6040516102c091906124ad565b348015610350575f80fd5b5061036461035f366004612510565b61089a565b005b348015610371575f80fd5b506102fc61271081565b348015610386575f80fd5b506102fc62093a8081565b34801561039c575f80fd5b506103646103ab36600461257b565b61095f565b3480156103bb575f80fd5b506102fc6103ca366004612469565b5f9081526020819052604090206001015490565b3480156103e9575f80fd5b506103646103f836600461260d565b610a34565b348015610408575f80fd5b5061036461041736600461260d565b610a5e565b348015610427575f80fd5b50610364610436366004612752565b610aaa565b610364610449366004612796565b610cde565b348015610459575f80fd5b506102fc60025481565b34801561046e575f80fd5b506102fc7fdb9556138406326f00296e13ea2ad7db24ba82381212d816b1a40c23b466b32781565b3480156104a1575f80fd5b506103646104b0366004612837565b610fe5565b3480156104c0575f80fd5b506102fc61070881565b3480156104d5575f80fd5b506102b46104e4366004612469565b60076020525f908152604090205460ff1681565b348015610503575f80fd5b50610364610512366004612871565b6111b9565b610364610525366004612837565b6112ea565b348015610535575f80fd5b506105496105443660046128b3565b61152d565b6040516001600160a01b0390911681526020016102c0565b34801561056c575f80fd5b506105b561057b366004612469565b60066020525f90815260409020546bffffffffffffffffffffffff8116906c0100000000000000000000000090046001600160a01b031682565b604080516bffffffffffffffffffffffff90931683526001600160a01b039091166020830152016102c0565b3480156105ec575f80fd5b506102b46105fb36600461260d565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561062e575f80fd5b506102fc7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b348015610661575f80fd5b506102fc5f81565b348015610674575f80fd5b506102fc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a7575f80fd5b506102b46106b636600461260d565b61154b565b3480156106c6575f80fd5b506106da6106d5366004612837565b61164b565b6040516102c091906128d3565b3480156106f2575f80fd5b50610364610701366004612469565b6116bd565b348015610711575f80fd5b506102fc60085481565b348015610726575f80fd5b50610364610735366004612469565b611823565b348015610745575f80fd5b50610364610754366004612469565b611905565b348015610764575f80fd5b506102fc620f424081565b34801561077a575f80fd5b506102fc610789366004612469565b61196d565b348015610799575f80fd5b506102fc7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b3480156107cc575f80fd5b506103646107db3660046129b9565b611983565b3480156107eb575f80fd5b506103646107fa36600461260d565b6119fc565b34801561080a575f80fd5b506102fc610819366004612a4b565b60036020525f908152604090205481565b348015610835575f80fd5b506102fc60045481565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610894575061089482611a20565b92915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108c481611ab6565b6001600160a01b0383165f90815260036020526040812054908190036108ea5750505050565b6001600160a01b0384165f8181526003602052604081205561090d908483611ac3565b604080516001600160a01b038087168252851660208201529081018290527f244e51bc38c1452fa8aaf487bcb4bca36c2baa3a5fbdb776b1eabd8dc6d277cd9060600160405180910390a1505b505050565b866001600160a01b03167fc8474c3f51b5bbdef6e0039cc01a995085e6d38941e6685882a4ba75df6c02ec7f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a6040516020016109de907f64756d6d795265717565737400000000000000000000000000000000000000008152600c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610a22918d908b908b908b908b908b90612a88565b60405180910390a35050505050505050565b5f82815260208190526040902060010154610a4e81611ab6565b610a588383611be1565b50505050565b6001600160a01b0381163314610aa0576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095a8282611c14565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610ad481611ab6565b825160208401205f610ae58561164b565b905060025f8381526005602052604090205460ff166004811115610b0b57610b0b612480565b14610b42576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c0100000000000000000000000090046001600160a01b03169082018190523314610bc4576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611610c11576040517f1992d0bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600560205260409020805460ff1916600317905561010082015115610c6b5761010082015160808301516001600160a01b03165f9081526003602052604081208054909190610c65908490612b44565b90915550505b608082015160c0830151610c896001600160a01b0383168883611ac3565b604080516001600160a01b03848116825260208201849052891691339188917f582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac67891015b60405180910390a45050505050505050565b46815f015163ffffffff1603610d20576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08101511580610d33575060c0810151155b15610d6a576040517fe38820c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101516001600160a01b03161580610d8f575060808101516001600160a01b0316155b15610dc6576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dd261070842612b44565b8161010001511015610e10576040517f04b7fcc800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610e243083606001518460a00151611c3f565b90505f806002541115610e5057620f424060025483610e439190612b57565b610e4d9190612b6e565b90505b610e5a8183612ba6565b91505f6040518061018001604052804663ffffffff168152602001855f015163ffffffff16815260200185602001516001600160a01b0316815260200185604001516001600160a01b0316815260200185606001516001600160a01b0316815260200185608001516001600160a01b031681526020018481526020018560c0015181526020018381526020018560e0015115158152602001856101000151815260200160085f815480929190610f0f90612bb9565b909155509052604051610f2591906020016128d3565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020808301919091205f8181526005835293909320805460ff191660011790558701518751606089015160808a015160c08b015160e08c015195985095966001600160a01b039094169587957f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a95610fd6958b959094909390928e92612a88565b60405180910390a35050505050565b805160208201205f610ff68361164b565b335f9081527fd2043bf65931af3dbecf60d0db8f40e4160406d7beb00522f4200cf4944a1eb8602052604090205490915060ff161561107257806101400151421161106d576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110be565b62093a808161014001516110869190612b44565b42116110be576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8381526005602052604090205460ff1660048111156110e2576110e2612480565b14611119576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82815260056020526040808220805460ff19166004179055820151608083015161010084015160c0850151929391926111539190612b44565b90506111696001600160a01b0383168483611ac3565b604080516001600160a01b0384811682526020820184905285169187917fb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958910160405180910390a3505050505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc46111e381611ab6565b8251602084012060015f8281526005602052604090205460ff16600481111561120e5761120e612480565b14611245576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8181526005602090815260408083208054600260ff19909116179055805180820182526bffffffffffffffffffffffff4281168252338285018181528787526006865295849020925195516001600160a01b03166c0100000000000000000000000002959091169490941790555185815283917f4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4910160405180910390a350505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461131481611ab6565b815160208301205f6113258461164b565b90504663ffffffff16816020015163ffffffff1614611370576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061014001514211156113af576040517f559895a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526007602052604090205460ff16156113f7576040517fbef7bb7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600760205260409020805460ff19166001179055606081015160a082015160e083015160045461012085015161143e57505f611438848484611c3f565b506114af565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b0384160161148257611438848461147d8486612b44565b611c3f565b61148d848484611c3f565b506114ad8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee83611c3f565b505b845160808087015160a08089015160c0808b015160e08c01516040805163ffffffff90991689526001600160a01b0396871660208a0152938616938801939093526060870152938501528301849052861691339189917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9101610ccc565b5f8281526001602052604081206115449083611e09565b9392505050565b5f60025f8481526005602052604090205460ff16600481111561157057611570612480565b146115a7576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526001600160a01b036c01000000000000000000000000909104811691830182905284161461162c576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611949350505050565b60408051610180810182525f8082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820152825190916108949184018101908401612c11565b7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d6116e781611ab6565b60025f8381526005602052604090205460ff16600481111561170b5761170b612480565b14611742576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff8082168085526c010000000000000000000000009092046001600160a01b031693909201929092526107089142031611156117d0576040517f3e908aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600560209081526040808320805460ff19166001179055600690915280822082905551339184917f0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad49190a35050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561184d81611ab6565b6127108211156118be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e657746656552617465203e206d61780000000000000000000000000000000060448201526064015b60405180910390fd5b600280549083905560408051828152602081018590527f14914da2bf76024616fbe1859783fcd4dbddcb179b1f3a854949fbf920dcb95791015b60405180910390a1505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561192f81611ab6565b600480549083905560408051828152602081018590527f5cf09b12f3f56b4c564d51b25b40360af6d795198adb61ae0806a36c294323fa91016118f8565b5f81815260016020526040812061089490611e14565b6040805163ffffffff881681526001600160a01b03878116602083015286811682840152606082018690526080820185905260a082018490529151898316928b16918c917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9181900360c00190a4505050505050505050565b5f82815260208190526040902060010154611a1681611ab6565b610a588383611c14565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061089457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610894565b611ac08133611e1d565b50565b306001600160a01b03831603611ad857505050565b805f03611ae457505050565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601611bcd575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611b5d576040519150601f19603f3d011682016040523d82523d5f602084013e611b62565b606091505b5050905080610a58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064016118b5565b61095a6001600160a01b0384168383611e8c565b5f80611bed8484611f00565b90508015611544575f848152600160205260409020611c0c9084611fa7565b509392505050565b5f80611c208484611fbb565b90508015611544575f848152600160205260409020611c0c908461203c565b5f6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611da357611c76836001600160a01b0316612050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528416906370a0823190602401602060405180830381865afa158015611cd3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf79190612cdb565b9050611d0e6001600160a01b0384163386856120f5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528291908516906370a0823190602401602060405180830381865afa158015611d6e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d929190612cdb565b611d9c9190612ba6565b9050611544565b348214611ddc576040517f81de0bf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014611e0057611e006001600160a01b0384168584611ac3565b50349392505050565b5f611544838361212e565b5f610894825490565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16611e88576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018390526044016118b5565b5050565b6040516001600160a01b0383811660248301526044820183905261095a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612154565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16611fa0575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611f583390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610894565b505f610894565b5f611544836001600160a01b0384166121ce565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1615611fa0575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610894565b5f611544836001600160a01b038416612213565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b038216016120b2576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f03611ac0576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610a589186918216906323b872dd90608401611eb9565b5f825f01828154811061214357612143612cf2565b905f5260205f200154905092915050565b5f6121686001600160a01b038416836122f6565b905080515f1415801561218c57508080602001905181019061218a9190612d1f565b155b1561095a576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016118b5565b5f818152600183016020526040812054611fa057508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610894565b5f81815260018301602052604081205480156122ed575f612235600183612ba6565b85549091505f9061224890600190612ba6565b90508082146122a7575f865f01828154811061226657612266612cf2565b905f5260205f200154905080875f01848154811061228657612286612cf2565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806122b8576122b8612d3a565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610894565b5f915050610894565b606061154483835f845f80856001600160a01b0316848660405161231a9190612d67565b5f6040518083038185875af1925050503d805f8114612354576040519150601f19603f3d011682016040523d82523d5f602084013e612359565b606091505b5091509150612369868383612373565b9695505050505050565b60608261238857612383826123e8565b611544565b815115801561239f57506001600160a01b0384163b155b156123e1576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016118b5565b5080611544565b8051156123f85780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6020828403121561243a575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611544575f80fd5b5f60208284031215612479575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60208101600583106124e6577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b6001600160a01b0381168114611ac0575f80fd5b803561250b816124ec565b919050565b5f8060408385031215612521575f80fd5b823561252c816124ec565b9150602083013561253c816124ec565b809150509250929050565b63ffffffff81168114611ac0575f80fd5b803561250b81612547565b8015158114611ac0575f80fd5b803561250b81612563565b5f805f805f805f80610100898b031215612593575f80fd5b883561259e81612547565b975060208901356125ae816124ec565b965060408901356125be816124ec565b955060608901356125ce816124ec565b945060808901356125de816124ec565b935060a0890135925060c0890135915060e08901356125fc81612563565b809150509295985092959890939650565b5f806040838503121561261e575f80fd5b82359150602083013561253c816124ec565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610120810167ffffffffffffffff8111828210171561268157612681612630565b60405290565b604051610180810167ffffffffffffffff8111828210171561268157612681612630565b5f82601f8301126126ba575f80fd5b813567ffffffffffffffff808211156126d5576126d5612630565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561271b5761271b612630565b81604052838152866020858801011115612733575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f8060408385031215612763575f80fd5b823567ffffffffffffffff811115612779575f80fd5b612785858286016126ab565b925050602083013561253c816124ec565b5f61012082840312156127a7575f80fd5b6127af61265d565b6127b883612558565b81526127c660208401612500565b60208201526127d760408401612500565b60408201526127e860608401612500565b60608201526127f960808401612500565b608082015260a083013560a082015260c083013560c082015261281e60e08401612570565b60e0820152610100928301359281019290925250919050565b5f60208284031215612847575f80fd5b813567ffffffffffffffff81111561285d575f80fd5b612869848285016126ab565b949350505050565b5f8060408385031215612882575f80fd5b823567ffffffffffffffff811115612898575f80fd5b6128a4858286016126ab565b95602094909401359450505050565b5f80604083850312156128c4575f80fd5b50508035926020909101359150565b815163ffffffff168152610180810160208301516128f9602084018263ffffffff169052565b50604083015161291460408401826001600160a01b03169052565b50606083015161292f60608401826001600160a01b03169052565b50608083015161294a60808401826001600160a01b03169052565b5060a083015161296560a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e08301526101008084015181840152506101208084015161299a8285018215159052565b5050610140838101519083015261016092830151929091019190915290565b5f805f805f805f805f6101208a8c0312156129d2575f80fd5b8935985060208a01356129e4816124ec565b975060408a01356129f4816124ec565b965060608a0135612a0481612547565b955060808a0135612a14816124ec565b945060a08a0135612a24816124ec565b8094505060c08a0135925060e08a013591506101008a013590509295985092959850929598565b5f60208284031215612a5b575f80fd5b8135611544816124ec565b5f5b83811015612a80578181015183820152602001612a68565b50505f910152565b60e081525f88518060e0840152610100612aa88282860160208e01612a66565b63ffffffff9990991660208401526001600160a01b039788166040840152959096166060820152608081019390935260a0830191909152151560c0820152601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190910192915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561089457610894612b17565b808202811582820484141761089457610894612b17565b5f82612ba1577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561089457610894612b17565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612be957612be9612b17565b5060010190565b805161250b81612547565b805161250b816124ec565b805161250b81612563565b5f6101808284031215612c22575f80fd5b612c2a612687565b612c3383612bf0565b8152612c4160208401612bf0565b6020820152612c5260408401612bfb565b6040820152612c6360608401612bfb565b6060820152612c7460808401612bfb565b6080820152612c8560a08401612bfb565b60a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120612cb8818501612c06565b908201526101408381015190820152610160928301519281019290925250919050565b5f60208284031215612ceb575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612d2f575f80fd5b815161154481612563565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f8251612d78818460208701612a66565b919091019291505056fea2646970667358221220a680728cf67202188e89234ba1713a1632036ac4d52d10a2976c56781d1b4e1964736f6c63430008140033","runtime-code":"0x608060405260043610610291575f3560e01c80639010d07c11610165578063affed0e0116100c6578063ccc574901161007c578063d547741f11610062578063d547741f146107e0578063dcf844a7146107ff578063e00a83e01461082a575f80fd5b8063ccc574901461078e578063d3504844146107c1575f80fd5b8063b250fe6b116100ac578063b250fe6b1461073a578063bf333f2c14610759578063ca15c8731461076f575f80fd5b8063affed0e014610706578063b13aa2d61461071b575f80fd5b8063a3ec191a1161011b578063aa9641ab11610101578063aa9641ab1461069c578063ac11fb1a146106bb578063add98c70146106e7575f80fd5b8063a3ec191a14610669578063a5bbe22b146104b5575f80fd5b806391d148541161014b57806391d14854146105e1578063926d7d7f14610623578063a217fddf14610656575f80fd5b80639010d07c1461052a57806391ad503914610561575f80fd5b806336568abe1161020f5780635eb7d946116101c55780638379a24f116101ab5780638379a24f146104ca578063886d36ff146104f85780638f0d6f1714610517575f80fd5b80635eb7d94614610496578063820688d5146104b5575f80fd5b806345851694116101f5578063458516941461043b57806358f858801461044e5780635960ccf214610463575f80fd5b806336568abe146103fd57806341fcb6121461041c575f80fd5b80630f5f6ed71161026457806323f83f7a1161024a57806323f83f7a14610391578063248a9ca3146103b05780632f2ff15d146103de575f80fd5b80630f5f6ed714610366578063190da5951461037b575f80fd5b806301ffc9a71461029557806303ed0ee5146102c9578063051287bc1461030a57806306f333f214610345575b5f80fd5b3480156102a0575f80fd5b506102b46102af36600461242a565b61083f565b60405190151581526020015b60405180910390f35b3480156102d4575f80fd5b506102fc7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d81565b6040519081526020016102c0565b348015610315575f80fd5b50610338610324366004612469565b60056020525f908152604090205460ff1681565b6040516102c091906124ad565b348015610350575f80fd5b5061036461035f366004612510565b61089a565b005b348015610371575f80fd5b506102fc61271081565b348015610386575f80fd5b506102fc62093a8081565b34801561039c575f80fd5b506103646103ab36600461257b565b61095f565b3480156103bb575f80fd5b506102fc6103ca366004612469565b5f9081526020819052604090206001015490565b3480156103e9575f80fd5b506103646103f836600461260d565b610a34565b348015610408575f80fd5b5061036461041736600461260d565b610a5e565b348015610427575f80fd5b50610364610436366004612752565b610aaa565b610364610449366004612796565b610cde565b348015610459575f80fd5b506102fc60025481565b34801561046e575f80fd5b506102fc7fdb9556138406326f00296e13ea2ad7db24ba82381212d816b1a40c23b466b32781565b3480156104a1575f80fd5b506103646104b0366004612837565b610fe5565b3480156104c0575f80fd5b506102fc61070881565b3480156104d5575f80fd5b506102b46104e4366004612469565b60076020525f908152604090205460ff1681565b348015610503575f80fd5b50610364610512366004612871565b6111b9565b610364610525366004612837565b6112ea565b348015610535575f80fd5b506105496105443660046128b3565b61152d565b6040516001600160a01b0390911681526020016102c0565b34801561056c575f80fd5b506105b561057b366004612469565b60066020525f90815260409020546bffffffffffffffffffffffff8116906c0100000000000000000000000090046001600160a01b031682565b604080516bffffffffffffffffffffffff90931683526001600160a01b039091166020830152016102c0565b3480156105ec575f80fd5b506102b46105fb36600461260d565b5f918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561062e575f80fd5b506102fc7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc481565b348015610661575f80fd5b506102fc5f81565b348015610674575f80fd5b506102fc7f000000000000000000000000000000000000000000000000000000000000000081565b3480156106a7575f80fd5b506102b46106b636600461260d565b61154b565b3480156106c6575f80fd5b506106da6106d5366004612837565b61164b565b6040516102c091906128d3565b3480156106f2575f80fd5b50610364610701366004612469565b6116bd565b348015610711575f80fd5b506102fc60085481565b348015610726575f80fd5b50610364610735366004612469565b611823565b348015610745575f80fd5b50610364610754366004612469565b611905565b348015610764575f80fd5b506102fc620f424081565b34801561077a575f80fd5b506102fc610789366004612469565b61196d565b348015610799575f80fd5b506102fc7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5581565b3480156107cc575f80fd5b506103646107db3660046129b9565b611983565b3480156107eb575f80fd5b506103646107fa36600461260d565b6119fc565b34801561080a575f80fd5b506102fc610819366004612a4b565b60036020525f908152604090205481565b348015610835575f80fd5b506102fc60045481565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f000000000000000000000000000000000000000000000000000000001480610894575061089482611a20565b92915050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f556108c481611ab6565b6001600160a01b0383165f90815260036020526040812054908190036108ea5750505050565b6001600160a01b0384165f8181526003602052604081205561090d908483611ac3565b604080516001600160a01b038087168252851660208201529081018290527f244e51bc38c1452fa8aaf487bcb4bca36c2baa3a5fbdb776b1eabd8dc6d277cd9060600160405180910390a1505b505050565b866001600160a01b03167fc8474c3f51b5bbdef6e0039cc01a995085e6d38941e6685882a4ba75df6c02ec7f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a6040516020016109de907f64756d6d795265717565737400000000000000000000000000000000000000008152600c0190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610a22918d908b908b908b908b908b90612a88565b60405180910390a35050505050505050565b5f82815260208190526040902060010154610a4e81611ab6565b610a588383611be1565b50505050565b6001600160a01b0381163314610aa0576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095a8282611c14565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc4610ad481611ab6565b825160208401205f610ae58561164b565b905060025f8381526005602052604090205460ff166004811115610b0b57610b0b612480565b14610b42576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526c0100000000000000000000000090046001600160a01b03169082018190523314610bc4576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611610c11576040517f1992d0bd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600560205260409020805460ff1916600317905561010082015115610c6b5761010082015160808301516001600160a01b03165f9081526003602052604081208054909190610c65908490612b44565b90915550505b608082015160c0830151610c896001600160a01b0383168883611ac3565b604080516001600160a01b03848116825260208201849052891691339188917f582211c35a2139ac3bbaac74663c6a1f56c6cbb658b41fe11fd45a82074ac67891015b60405180910390a45050505050505050565b46815f015163ffffffff1603610d20576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a08101511580610d33575060c0810151155b15610d6a576040517fe38820c800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60608101516001600160a01b03161580610d8f575060808101516001600160a01b0316155b15610dc6576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610dd261070842612b44565b8161010001511015610e10576040517f04b7fcc800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f610e243083606001518460a00151611c3f565b90505f806002541115610e5057620f424060025483610e439190612b57565b610e4d9190612b6e565b90505b610e5a8183612ba6565b91505f6040518061018001604052804663ffffffff168152602001855f015163ffffffff16815260200185602001516001600160a01b0316815260200185604001516001600160a01b0316815260200185606001516001600160a01b0316815260200185608001516001600160a01b031681526020018481526020018560c0015181526020018381526020018560e0015115158152602001856101000151815260200160085f815480929190610f0f90612bb9565b909155509052604051610f2591906020016128d3565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815282825280516020808301919091205f8181526005835293909320805460ff191660011790558701518751606089015160808a015160c08b015160e08c015195985095966001600160a01b039094169587957f120ea0364f36cdac7983bcfdd55270ca09d7f9b314a2ebc425a3b01ab1d6403a95610fd6958b959094909390928e92612a88565b60405180910390a35050505050565b805160208201205f610ff68361164b565b335f9081527fd2043bf65931af3dbecf60d0db8f40e4160406d7beb00522f4200cf4944a1eb8602052604090205490915060ff161561107257806101400151421161106d576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110be565b62093a808161014001516110869190612b44565b42116110be576040517fe15ff9ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f8381526005602052604090205460ff1660048111156110e2576110e2612480565b14611119576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f82815260056020526040808220805460ff19166004179055820151608083015161010084015160c0850151929391926111539190612b44565b90506111696001600160a01b0383168483611ac3565b604080516001600160a01b0384811682526020820184905285169187917fb4c55c0c9bc613519b920e88748090150b890a875d307f21bea7d4fb2e8bc958910160405180910390a3505050505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc46111e381611ab6565b8251602084012060015f8281526005602052604090205460ff16600481111561120e5761120e612480565b14611245576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8181526005602090815260408083208054600260ff19909116179055805180820182526bffffffffffffffffffffffff4281168252338285018181528787526006865295849020925195516001600160a01b03166c0100000000000000000000000002959091169490941790555185815283917f4ac8af8a2cd87193d64dfc7a3b8d9923b714ec528b18725d080aa1299be0c5e4910160405180910390a350505050565b7fe2b7fb3b832174769106daebcfd6d1970523240dda11281102db9363b83b0dc461131481611ab6565b815160208301205f6113258461164b565b90504663ffffffff16816020015163ffffffff1614611370576040517f7029fdf900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061014001514211156113af576040517f559895a300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f8281526007602052604090205460ff16156113f7576040517fbef7bb7d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600760205260409020805460ff19166001179055606081015160a082015160e083015160045461012085015161143e57505f611438848484611c3f565b506114af565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b0384160161148257611438848461147d8486612b44565b611c3f565b61148d848484611c3f565b506114ad8473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee83611c3f565b505b845160808087015160a08089015160c0808b015160e08c01516040805163ffffffff90991689526001600160a01b0396871660208a0152938616938801939093526060870152938501528301849052861691339189917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9101610ccc565b5f8281526001602052604081206115449083611e09565b9392505050565b5f60025f8481526005602052604090205460ff16600481111561157057611570612480565b146115a7576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f838152600660209081526040918290208251808401909352546bffffffffffffffffffffffff811683526001600160a01b036c01000000000000000000000000909104811691830182905284161461162c576040517f4af43a9000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516107089042036bffffffffffffffffffffffff1611949350505050565b60408051610180810182525f8082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201819052610160820152825190916108949184018101908401612c11565b7f043c983c49d46f0e102151eaf8085d4a2e6571d5df2d47b013f39bddfd4a639d6116e781611ab6565b60025f8381526005602052604090205460ff16600481111561170b5761170b612480565b14611742576040517f4145817200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600660209081526040918290208251808401909352546bffffffffffffffffffffffff8082168085526c010000000000000000000000009092046001600160a01b031693909201929092526107089142031611156117d0576040517f3e908aac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f828152600560209081526040808320805460ff19166001179055600690915280822082905551339184917f0695cf1d39b3055dcd0fe02d8b47eaf0d5a13e1996de925de59d0ef9b7f7fad49190a35050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561184d81611ab6565b6127108211156118be576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f6e657746656552617465203e206d61780000000000000000000000000000000060448201526064015b60405180910390fd5b600280549083905560408051828152602081018590527f14914da2bf76024616fbe1859783fcd4dbddcb179b1f3a854949fbf920dcb95791015b60405180910390a1505050565b7f7935bd0ae54bc31f548c14dba4d37c5c64b3f8ca900cb468fb8abd54d5894f5561192f81611ab6565b600480549083905560408051828152602081018590527f5cf09b12f3f56b4c564d51b25b40360af6d795198adb61ae0806a36c294323fa91016118f8565b5f81815260016020526040812061089490611e14565b6040805163ffffffff881681526001600160a01b03878116602083015286811682840152606082018690526080820185905260a082018490529151898316928b16918c917ff8ae392d784b1ea5e8881bfa586d81abf07ef4f1e2fc75f7fe51c90f05199a5c9181900360c00190a4505050505050505050565b5f82815260208190526040902060010154611a1681611ab6565b610a588383611c14565b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b00000000000000000000000000000000000000000000000000000000148061089457507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831614610894565b611ac08133611e1d565b50565b306001600160a01b03831603611ad857505050565b805f03611ae457505050565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b03841601611bcd575f826001600160a01b0316826040515f6040518083038185875af1925050503d805f8114611b5d576040519150601f19603f3d011682016040523d82523d5f602084013e611b62565b606091505b5050905080610a58576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f455448207472616e73666572206661696c65640000000000000000000000000060448201526064016118b5565b61095a6001600160a01b0384168383611e8c565b5f80611bed8484611f00565b90508015611544575f848152600160205260409020611c0c9084611fa7565b509392505050565b5f80611c208484611fbb565b90508015611544575f848152600160205260409020611c0c908461203c565b5f6001600160a01b03831673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611da357611c76836001600160a01b0316612050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528416906370a0823190602401602060405180830381865afa158015611cd3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cf79190612cdb565b9050611d0e6001600160a01b0384163386856120f5565b6040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301528291908516906370a0823190602401602060405180830381865afa158015611d6e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d929190612cdb565b611d9c9190612ba6565b9050611544565b348214611ddc576040517f81de0bf300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b0384163014611e0057611e006001600160a01b0384168584611ac3565b50349392505050565b5f611544838361212e565b5f610894825490565b5f828152602081815260408083206001600160a01b038516845290915290205460ff16611e88576040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526001600160a01b0382166004820152602481018390526044016118b5565b5050565b6040516001600160a01b0383811660248301526044820183905261095a91859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612154565b5f828152602081815260408083206001600160a01b038516845290915281205460ff16611fa0575f838152602081815260408083206001600160a01b03861684529091529020805460ff19166001179055611f583390565b6001600160a01b0316826001600160a01b0316847f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a4506001610894565b505f610894565b5f611544836001600160a01b0384166121ce565b5f828152602081815260408083206001600160a01b038516845290915281205460ff1615611fa0575f838152602081815260408083206001600160a01b0386168085529252808320805460ff1916905551339286917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a4506001610894565b5f611544836001600160a01b038416612213565b7fffffffffffffffffffffffff11111111111111111111111111111111111111126001600160a01b038216016120b2576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160a01b03163b5f03611ac0576040517f7f523fe800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516001600160a01b038481166024830152838116604483015260648201839052610a589186918216906323b872dd90608401611eb9565b5f825f01828154811061214357612143612cf2565b905f5260205f200154905092915050565b5f6121686001600160a01b038416836122f6565b905080515f1415801561218c57508080602001905181019061218a9190612d1f565b155b1561095a576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b03841660048201526024016118b5565b5f818152600183016020526040812054611fa057508154600181810184555f848152602080822090930184905584548482528286019093526040902091909155610894565b5f81815260018301602052604081205480156122ed575f612235600183612ba6565b85549091505f9061224890600190612ba6565b90508082146122a7575f865f01828154811061226657612266612cf2565b905f5260205f200154905080875f01848154811061228657612286612cf2565b5f918252602080832090910192909255918252600188019052604090208390555b85548690806122b8576122b8612d3a565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f905560019350505050610894565b5f915050610894565b606061154483835f845f80856001600160a01b0316848660405161231a9190612d67565b5f6040518083038185875af1925050503d805f8114612354576040519150601f19603f3d011682016040523d82523d5f602084013e612359565b606091505b5091509150612369868383612373565b9695505050505050565b60608261238857612383826123e8565b611544565b815115801561239f57506001600160a01b0384163b155b156123e1576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b03851660048201526024016118b5565b5080611544565b8051156123f85780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f6020828403121561243a575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114611544575f80fd5b5f60208284031215612479575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60208101600583106124e6577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b6001600160a01b0381168114611ac0575f80fd5b803561250b816124ec565b919050565b5f8060408385031215612521575f80fd5b823561252c816124ec565b9150602083013561253c816124ec565b809150509250929050565b63ffffffff81168114611ac0575f80fd5b803561250b81612547565b8015158114611ac0575f80fd5b803561250b81612563565b5f805f805f805f80610100898b031215612593575f80fd5b883561259e81612547565b975060208901356125ae816124ec565b965060408901356125be816124ec565b955060608901356125ce816124ec565b945060808901356125de816124ec565b935060a0890135925060c0890135915060e08901356125fc81612563565b809150509295985092959890939650565b5f806040838503121561261e575f80fd5b82359150602083013561253c816124ec565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610120810167ffffffffffffffff8111828210171561268157612681612630565b60405290565b604051610180810167ffffffffffffffff8111828210171561268157612681612630565b5f82601f8301126126ba575f80fd5b813567ffffffffffffffff808211156126d5576126d5612630565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561271b5761271b612630565b81604052838152866020858801011115612733575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f8060408385031215612763575f80fd5b823567ffffffffffffffff811115612779575f80fd5b612785858286016126ab565b925050602083013561253c816124ec565b5f61012082840312156127a7575f80fd5b6127af61265d565b6127b883612558565b81526127c660208401612500565b60208201526127d760408401612500565b60408201526127e860608401612500565b60608201526127f960808401612500565b608082015260a083013560a082015260c083013560c082015261281e60e08401612570565b60e0820152610100928301359281019290925250919050565b5f60208284031215612847575f80fd5b813567ffffffffffffffff81111561285d575f80fd5b612869848285016126ab565b949350505050565b5f8060408385031215612882575f80fd5b823567ffffffffffffffff811115612898575f80fd5b6128a4858286016126ab565b95602094909401359450505050565b5f80604083850312156128c4575f80fd5b50508035926020909101359150565b815163ffffffff168152610180810160208301516128f9602084018263ffffffff169052565b50604083015161291460408401826001600160a01b03169052565b50606083015161292f60608401826001600160a01b03169052565b50608083015161294a60808401826001600160a01b03169052565b5060a083015161296560a08401826001600160a01b03169052565b5060c083015160c083015260e083015160e08301526101008084015181840152506101208084015161299a8285018215159052565b5050610140838101519083015261016092830151929091019190915290565b5f805f805f805f805f6101208a8c0312156129d2575f80fd5b8935985060208a01356129e4816124ec565b975060408a01356129f4816124ec565b965060608a0135612a0481612547565b955060808a0135612a14816124ec565b945060a08a0135612a24816124ec565b8094505060c08a0135925060e08a013591506101008a013590509295985092959850929598565b5f60208284031215612a5b575f80fd5b8135611544816124ec565b5f5b83811015612a80578181015183820152602001612a68565b50505f910152565b60e081525f88518060e0840152610100612aa88282860160208e01612a66565b63ffffffff9990991660208401526001600160a01b039788166040840152959096166060820152608081019390935260a0830191909152151560c0820152601f9091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160190910192915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8082018082111561089457610894612b17565b808202811582820484141761089457610894612b17565b5f82612ba1577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b8181038181111561089457610894612b17565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612be957612be9612b17565b5060010190565b805161250b81612547565b805161250b816124ec565b805161250b81612563565b5f6101808284031215612c22575f80fd5b612c2a612687565b612c3383612bf0565b8152612c4160208401612bf0565b6020820152612c5260408401612bfb565b6040820152612c6360608401612bfb565b6060820152612c7460808401612bfb565b6080820152612c8560a08401612bfb565b60a082015260c083015160c082015260e083015160e0820152610100808401518183015250610120612cb8818501612c06565b908201526101408381015190820152610160928301519281019290925250919050565b5f60208284031215612ceb575f80fd5b5051919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612d2f575f80fd5b815161154481612563565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffd5b5f8251612d78818460208701612a66565b919091019291505056fea2646970667358221220a680728cf67202188e89234ba1713a1632036ac4d52d10a2976c56781d1b4e1964736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"67202:986:0:-:0;;;67244:49;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;67283:6;;55515:38;25160:4;67283:6;55515:10;:38::i;:::-;-1:-1:-1;;57747:12:0::1;57733:26;::::0;-1:-1:-1;67202:986:0;;-1:-1:-1;67202:986:0;32852:245;32950:4;;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33014:59;33085:7;-1:-1:-1;32852:245:0;;;;;:::o;28907:290::-;28996:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;-1:-1:-1;;;;;29045:29:0;;;;;;;;;:36;;-1:-1:-1;;29045:36:0;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;-1:-1:-1;;;;;29094:40:0;29112:7;-1:-1:-1;;;;;29094:40:0;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;-1:-1:-1;;;;;12822:23:0;;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;14:290:1;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:1;;214:42;;204:70;;270:1;267;260:12;14:290;67202:986:0;;;;;;;;;;;;","srcMapRuntime":"67202:986:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;31534:226;;;;;;;;;;-1:-1:-1;31534:226:0;;;;;:::i;:::-;;:::i;:::-;;;612:14:1;;605:22;587:41;;575:2;560:18;31534:226:0;;;;;;;;54914:60;;;;;;;;;;;;54951:23;54914:60;;;;;785:25:1;;;773:2;758:18;54914:60:0;639:177:1;57255:54:0;;;;;;;;;;-1:-1:-1;57255:54:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;55846:349::-;;;;;;;;;;-1:-1:-1;55846:349:0;;;;;:::i;:::-;;:::i;:::-;;55090:45;;;;;;;;;;;;55129:6;55090:45;;56885;;;;;;;;;;;;56924:6;56885:45;;67297:455;;;;;;;;;;-1:-1:-1;67297:455:0;;;;;:::i;:::-;;:::i;26666:114::-;;;;;;;;;;-1:-1:-1;26666:114:0;;;;;:::i;:::-;26731:7;26753:12;;;;;;;;;;:22;;;;26666:114;27050:142;;;;;;;;;;-1:-1:-1;27050:142:0;;;;;:::i;:::-;;:::i;28106:237::-;;;;;;;;;;-1:-1:-1;28106:237:0;;;;;:::i;:::-;;:::i;64426:1108::-;;;;;;;;;;-1:-1:-1;64426:1108:0;;;;;:::i;:::-;;:::i;59278:1922::-;;;;;;:::i;:::-;;:::i;55248:30::-;;;;;;;;;;;;;;;;54844:66;;;;;;;;;;;;54884:26;54844:66;;66113:1085;;;;;;;;;;-1:-1:-1;66113:1085:0;;;;;:::i;:::-;;:::i;57013:56::-;;;;;;;;;;;;57059:10;57013:56;;57492:44;;;;;;;;;;-1:-1:-1;57492:44:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;62812:577;;;;;;;;;;-1:-1:-1;62812:577:0;;;;;:::i;:::-;;:::i;61234:1544::-;;;;;;:::i;:::-;;:::i;32319:148::-;;;;;;;;;;-1:-1:-1;32319:148:0;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;8481:55:1;;;8463:74;;8451:2;8436:18;32319:148:0;8317:226:1;57370:51:0;;;;;;;;;;-1:-1:-1;57370:51:0;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;57370:51:0;;;;;;;8750:26:1;8738:39;;;8720:58;;-1:-1:-1;;;;;8814:55:1;;;8809:2;8794:18;;8787:83;8693:18;57370:51:0;8548:328:1;25760:142:0;;;;;;;;;;-1:-1:-1;25760:142:0;;;;;:::i;:::-;25849:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;;;;25760:142;54776:64;;;;;;;;;;;;54815:25;54776:64;;25115:49;;;;;;;;;;-1:-1:-1;25115:49:0;25160:4;25115:49;;57644:36;;;;;;;;;;;;;;;64019:373;;;;;;;;;;-1:-1:-1;64019:373:0;;;;;:::i;:::-;;:::i;59079:165::-;;;;;;;;;;-1:-1:-1;59079:165:0;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;65568:511::-;;;;;;;;;;-1:-1:-1;65568:511:0;;;;;:::i;:::-;;:::i;57571:20::-;;;;;;;;;;;;;;;;55562:280;;;;;;;;;;-1:-1:-1;55562:280:0;;;;;:::i;:::-;;:::i;56199:258::-;;;;;;;;;;-1:-1:-1;56199:258:0;;;;;:::i;:::-;;:::i;55049:37::-;;;;;;;;;;;;55083:3;55049:37;;32625:133;;;;;;;;;;-1:-1:-1;32625:133:0;;;;;:::i;:::-;;:::i;54978:66::-;;;;;;;;;;;;55018:26;54978:66;;67756:430;;;;;;;;;;-1:-1:-1;67756:430:0;;;;;:::i;:::-;;:::i;27448:144::-;;;;;;;;;;-1:-1:-1;27448:144:0;;;;;:::i;:::-;;:::i;55330:47::-;;;;;;;;;;-1:-1:-1;55330:47:0;;;;;:::i;:::-;;;;;;;;;;;;;;55447:29;;;;;;;;;;;;;;;;31534:226;31627:4;31652:57;;;31667:42;31652:57;;:103;;;31719:36;31743:11;31719:23;:36::i;:::-;31639:116;31534:226;-1:-1:-1;;31534:226:0:o;55846:349::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;-1:-1:-1;;;;;55978:19:0;::::1;55958:17;55978:19:::0;;;:12:::1;:19;::::0;;;;;;56007:14;;;56003:27:::1;;56023:7;55846:349:::0;;;:::o;56003:27::-:1;-1:-1:-1::0;;;;;56067:19:0;::::1;56089:1;56067:19:::0;;;:12:::1;:19;::::0;;;;:23;56096:45:::1;::::0;56120:9;56131;56096:23:::1;:45::i;:::-;56152:38;::::0;;-1:-1:-1;;;;;12168:15:1;;;12150:34;;12220:15;;12215:2;12200:18;;12193:43;12252:18;;;12245:34;;;56152:38:0::1;::::0;12077:2:1;12062:18;56152:38:0::1;;;;;;;55952:243;25400:1;55846:349:::0;;;:::o;67297:455::-;67583:6;-1:-1:-1;;;;;67521:226:0;67544:31;67521:226;67597:32;;;;;;12504:14:1;12492:27;;12544:2;12535:12;;12290:263;67597:32:0;;;;;;;;;;;;;;;67521:226;;67637:10;;67655:11;;67674:9;;67691:12;;67711:10;;67729:12;;67521:226;:::i;:::-;;;;;;;;67297:455;;;;;;;;:::o;27050:142::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27162:25:::1;27173:4;27179:7;27162:10;:25::i;:::-;;27050:142:::0;;;:::o;28106:237::-;-1:-1:-1;;;;;28207:34:0;;19686:10;28207:34;28203:92;;28258:30;;;;;;;;;;;;;;28203:92;28301:37;28313:4;28319:18;28301:11;:37::i;64426:1108::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;64549:18;;::::1;::::0;::::1;::::0;64525:21:::1;64612:29;64559:7:::0;64612:20:::1;:29::i;:::-;64573:68:::0;-1:-1:-1;64751:27:0::1;64718:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:60;::::0;::::1;;;;;;:::i;:::-;;64714:96;;64793:17;;;;;;;;;;;;;;64714:96;64817:24;64844:27:::0;;;:12:::1;:27;::::0;;;;;;;;64817:54;;;;::::1;::::0;;;;::::1;::::0;::::1;::::0;;;;::::1;-1:-1:-1::0;;;;;64817:54:0::1;::::0;;::::1;::::0;;;64898:10:::1;64881:27;64877:57;;64917:17;;;;;;;;;;;;;;64877:57;63959:15:::0;;56783:10:::1;::::0;63940:15;63933:41;63925:49;;64944:35:::1;64940:72;;64988:24;;;;;;;;;;;;;;64940:72;65019:29;::::0;;;:14:::1;:29;::::0;;;;:60;;-1:-1:-1;;65019:60:0::1;65051:28;65019:60;::::0;;65146:27:::1;::::0;::::1;::::0;:31;65142:111:::1;;65226:27;::::0;::::1;::::0;65198:23:::1;::::0;::::1;::::0;-1:-1:-1;;;;;65185:37:0::1;;::::0;;;:12:::1;:37;::::0;;;;:68;;:37;;;:68:::1;::::0;65226:27;;65185:68:::1;:::i;:::-;::::0;;;-1:-1:-1;;65142:111:0::1;65340:23;::::0;::::1;::::0;65386:24:::1;::::0;::::1;::::0;65416:35:::1;-1:-1:-1::0;;;;;65416:23:0;::::1;65440:2:::0;65386:24;65416:23:::1;:35::i;:::-;65463:66;::::0;;-1:-1:-1;;;;;14343:55:1;;;14325:74;;14430:2;14415:18;;14408:34;;;65463:66:0;::::1;::::0;65499:10:::1;::::0;65484:13;;65463:66:::1;::::0;14298:18:1;65463:66:0::1;;;;;;;;64519:1015;;;;;64426:1108:::0;;;:::o;59278:1922::-;59397:13;59376:6;:17;;;:34;;;59372:63;;59419:16;;;;;;;;;;;;;;59372:63;59445:19;;;;:24;;:50;;-1:-1:-1;59473:17:0;;;;:22;59445:50;59441:86;;;59510:17;;;;;;;;;;;;;;59441:86;59537:18;;;;-1:-1:-1;;;;;59537:32:0;;;:66;;-1:-1:-1;59573:16:0;;;;-1:-1:-1;;;;;59573:30:0;;59537:66;59533:98;;;59618:13;;;;;;;;;;;;;;59533:98;59659:37;57059:10;59659:15;:37;:::i;:::-;59641:6;:15;;;:55;59637:92;;;59711:18;;;;;;;;;;;;;;59637:92;59852:20;59875:90;59901:4;59914:6;:18;;;59940:6;:19;;;59875:10;:90::i;:::-;59852:113;;60025:23;60076:1;60058:15;;:19;60054:91;;;55083:3;60119:15;;60104:12;:30;;;;:::i;:::-;60103:42;;;;:::i;:::-;60085:60;;60054:91;60151:31;60167:15;60151:31;;:::i;:::-;;;60287:20;60328:516;;;;;;;;60378:13;60328:516;;;;;;60415:6;:17;;;60328:516;;;;;;60456:6;:13;;;-1:-1:-1;;;;;60328:516:0;;;;;60494:6;:9;;;-1:-1:-1;;;;;60328:516:0;;;;;60526:6;:18;;;-1:-1:-1;;;;;60328:516:0;;;;;60565:6;:16;;;-1:-1:-1;;;;;60328:516:0;;;;;60605:12;60328:516;;;;60639:6;:17;;;60328:516;;;;60683:15;60328:516;;;;60722:6;:19;;;60328:516;;;;;;60761:6;:15;;;60328:516;;;;60793:5;;:7;;;;;;;;;:::i;:::-;;;;-1:-1:-1;60328:516:0;;60310:540;;;;;;;;:::i;:::-;;;;;;;;;;;;;;60880:18;;60310:540;60880:18;;;;;;;60856:21;60904:29;;;:14;:29;;;;;;:54;;-1:-1:-1;;60904:54:0;60936:22;60904:54;;;61014:13;;;61050:17;;61075:18;;;;61101:16;;;;61145:17;;;;61170:19;;;;60310:540;;-1:-1:-1;60880:18:0;;-1:-1:-1;;;;;60970:225:0;;;;60880:18;;60970:225;;;;60310:540;;61050:17;;61075:18;;61101:16;;61125:12;;60970:225;:::i;:::-;;;;;;;;59339:1861;;;;59278:1922;:::o;66113:1085::-;66190:18;;;;;;66166:21;66253:29;66200:7;66253:20;:29::i;:::-;66316:10;25849:4;25868:29;;;:12;;:29;:12;:29;;;66214:68;;-1:-1:-1;25868:29:0;;66289:358;;;66412:11;:20;;;66393:15;:39;66389:73;;66441:21;;;;;;;;;;;;;;66389:73;66289:358;;;56924:6;66567:11;:20;;;:35;;;;:::i;:::-;66548:15;:54;66544:96;;66619:21;;;;;;;;;;;;;;66544:96;66748:22;66715:29;;;;:14;:29;;;;;;;;:55;;;;;;;;:::i;:::-;;66711:91;;66785:17;;;;;;;;;;;;;;66711:91;66808:29;;;;:14;:29;;;;;;:53;;-1:-1:-1;;66808:53:0;66840:21;66808:53;;;66939:24;;;66985:23;;;;67058:27;;;;67031:24;;;;66939;;66985:23;;67031:54;;67058:27;67031:54;:::i;:::-;67014:71;-1:-1:-1;67091:35:0;-1:-1:-1;;;;;67091:23:0;;67115:2;67014:71;67091:23;:35::i;:::-;67138:55;;;-1:-1:-1;;;;;14343:55:1;;;14325:74;;14430:2;14415:18;;14408:34;;;67138:55:0;;;67160:13;;67138:55;;14298:18:1;67138:55:0;;;;;;;66160:1038;;;;;66113:1085;:::o;62812:577::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;62943:18;;::::1;::::0;::::1;::::0;63056:22:::1;63023:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:55;::::0;::::1;;;;;;:::i;:::-;;63019:91;;63093:17;;;;;;;;;;;;;;63019:91;63116:29;::::0;;;:14:::1;:29;::::0;;;;;;;:59;;63148:27:::1;-1:-1:-1::0;;63116:59:0;;::::1;;::::0;;63211:88;;;;::::1;::::0;;::::1;63249:15;63211:88:::0;::::1;::::0;;63282:10:::1;63211:88:::0;;::::1;::::0;;;63181:27;;;:12:::1;:27:::0;;;;;;:118;;;;-1:-1:-1;;;;;63181:118:0::1;::::0;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;63326:58;785:25:1;;;63116:29:0;;63326:58:::1;::::0;758:18:1;63326:58:0::1;;;;;;;62913:476;62812:577:::0;;;:::o;61234:1544::-;54815:25;25378:16;25389:4;25378:10;:16::i;:::-;61341:18;;::::1;::::0;::::1;::::0;61317:21:::1;61404:29;61351:7:::0;61404:20:::1;:29::i;:::-;61365:68;;61477:13;61443:48;;:11;:23;;;:48;;;61439:83;;61506:16;;;;;;;;;;;;;;61439:83;61610:11;:20;;;61592:15;:38;61588:69;;;61639:18;;;;;;;;;;;;;;61588:69;61710:27;::::0;;;:12:::1;:27;::::0;;;;;::::1;;61706:60;;;61746:20;;;;;;;;;;;;;;61706:60;61772:27;::::0;;;:12:::1;:27;::::0;;;;:34;;-1:-1:-1;;61772:34:0::1;61802:4;61772:34;::::0;;61911:25:::1;::::0;::::1;::::0;61958:21:::1;::::0;::::1;::::0;62002:22:::1;::::0;::::1;::::0;62048:14:::1;::::0;62073:24:::1;::::0;::::1;::::0;62068:457:::1;;-1:-1:-1::0;62139:1:0::1;62148:29;62159:2:::0;62163:5;62170:6;62148:10:::1;:29::i;:::-;;62068:457;;;62194:38:::0;-1:-1:-1;;;;;62194:38:0;::::1;::::0;62190:335:::1;;62302:38;62313:2:::0;62317:5;62324:15:::1;62333:6:::0;62324;:15:::1;:::i;:::-;62302:10;:38::i;62190:335::-;62428:29;62439:2;62443:5;62450:6;62428:10;:29::i;:::-;;62465:53;62476:2;52243:42;62511:6;62465:10;:53::i;:::-;;62190:335;62606:25:::0;;62639:23:::1;::::0;;::::1;::::0;62670:21:::1;::::0;;::::1;::::0;62699:24:::1;::::0;;::::1;::::0;62731:22:::1;::::0;::::1;::::0;62536:237:::1;::::0;;15553:10:1;15541:23;;;15523:42;;-1:-1:-1;;;;;15662:15:1;;;15657:2;15642:18;;15635:43;15714:15;;;15694:18;;;15687:43;;;;15761:2;15746:18;;15739:34;15789:19;;;15782:35;15833:19;;15826:35;;;62536:237:0;::::1;::::0;62578:10:::1;::::0;62557:13;;62536:237:::1;::::0;15495:19:1;62536:237:0::1;15238:629:1::0;32319:148:0;32412:7;32434:18;;;:12;:18;;;;;:28;;32456:5;32434:21;:28::i;:::-;32427:35;32319:148;-1:-1:-1;;;32319:148:0:o;64019:373::-;64112:4;64161:27;64128:29;;;;:14;:29;;;;;;;;:60;;;;;;;;:::i;:::-;;64124:96;;64203:17;;;;;;;;;;;;;;64124:96;64226:24;64253:27;;;:12;:27;;;;;;;;;64226:54;;;;;;;;;;;;;;-1:-1:-1;;;;;64226:54:0;;;;;;;;;;;;64290:24;;;64286:54;;64323:17;;;;;;;;;;;;;;64286:54;63959:15;;56783:10;;63940:15;63933:41;63925:49;;64353:34;;64019:373;-1:-1:-1;;;;64019:373:0:o;59079:165::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;59199:40:0;;-1:-1:-1;;59199:40:0;;;;;;;;;;:::i;65568:511::-;54951:23;25378:16;25389:4;25378:10;:16::i;:::-;65681:27:::1;65648:29;::::0;;;:14:::1;:29;::::0;;;;;::::1;;:60;::::0;::::1;;;;;;:::i;:::-;;65644:96;;65723:17;;;;;;;;;;;;;;65644:96;65761:27;::::0;;;:12:::1;:27;::::0;;;;;;;;65750:39;;;;::::1;::::0;;;;::::1;::::0;;::::1;::::0;;;;;;::::1;-1:-1:-1::0;;;;;65750:39:0::1;::::0;;;::::1;::::0;;;;56783:10:::1;::::0;63940:15;63933:41;63925:49;65750:56:::1;65746:96;;;65821:21;;;;;;;;;;;;;;65746:96;65922:29;::::0;;;:14:::1;:29;::::0;;;;;;;:54;;-1:-1:-1;;65922:54:0::1;65954:22;65922:54;::::0;;65989:12:::1;:27:::0;;;;;;65982:34;;;66028:46;66063:10:::1;::::0;65922:29;;66028:46:::1;::::0;65922:29;66028:46:::1;65568:511:::0;;:::o;55562:280::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;55129:6:::1;55665:10;:26;;55657:55;;;::::0;::::1;::::0;;17683:2:1;55657:55:0::1;::::0;::::1;17665:21:1::0;17722:2;17702:18;;;17695:30;17761:18;17741;;;17734:46;17797:18;;55657:55:0::1;;;;;;;;;55739:15;::::0;;55760:28;;;;55799:38:::1;::::0;;18000:25:1;;;18056:2;18041:18;;18034:34;;;55799:38:0::1;::::0;17973:18:1;55799:38:0::1;;;;;;;;55651:191;55562:280:::0;;:::o;56199:258::-;55018:26;25378:16;25389:4;25378:10;:16::i;:::-;56328:14:::1;::::0;;56348:34;;;;56393:59:::1;::::0;;18000:25:1;;;18056:2;18041:18;;18034:34;;;56393:59:0::1;::::0;17973:18:1;56393:59:0::1;17826:248:1::0;32625:133:0;32704:7;32726:18;;;:12;:18;;;;;:27;;:25;:27::i;67756:430::-;68007:174;;;15553:10:1;15541:23;;15523:42;;-1:-1:-1;;;;;15662:15:1;;;15657:2;15642:18;;15635:43;15714:15;;;15694:18;;;15687:43;15761:2;15746:18;;15739:34;;;15804:3;15789:19;;15782:35;;;15848:3;15833:19;;15826:35;;;68007:174:0;;;;;;;;;68028:13;;68007:174;;;;;15510:3:1;68007:174:0;;;67756:430;;;;;;;;;:::o;27448:144::-;26731:7;26753:12;;;;;;;;;;:22;;;25378:16;25389:4;25378:10;:16::i;:::-;27561:26:::1;27573:4;27579:7;27561:11;:26::i;25465:216::-:0;25558:4;25583:47;;;25598:32;25583:47;;:93;;-1:-1:-1;18903:25:0;18888:40;;;;25640:36;18785:148;26101:97;26163:30;26174:4;19686:10;26163;:30::i;:::-;26101:97;:::o;52518:610::-;52701:4;-1:-1:-1;;;;;52687:19:0;;;52683:32;;52518:610;;;:::o;52683:32::-;52779:5;52788:1;52779:10;52775:23;;52518:610;;;:::o;52775:23::-;52807:20;-1:-1:-1;;;;;52807:20:0;;;52803:321;;52969:12;52987:2;-1:-1:-1;;;;;52987:7:0;53002:5;52987:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;52968:44;;;53028:7;53020:39;;;;;;;18491:2:1;53020:39:0;;;18473:21:1;18530:2;18510:18;;;18503:30;18569:21;18549:18;;;18542:49;18608:18;;53020:39:0;18289:343:1;52803:321:0;53080:37;-1:-1:-1;;;;;53080:26:0;;53107:2;53111:5;53080:26;:37::i;32852:245::-;32950:4;32962:12;32977:31;32994:4;33000:7;32977:16;:31::i;:::-;32962:46;;33018:7;33014:59;;;33035:18;;;;:12;:18;;;;;:31;;33058:7;33035:22;:31::i;:::-;;33085:7;32852:245;-1:-1:-1;;;32852:245:0:o;33192:250::-;33291:4;33303:12;33318:32;33336:4;33342:7;33318:17;:32::i;:::-;33303:47;;33360:7;33356:62;;;33377:18;;;;:12;:18;;;;;:34;;33403:7;33377:25;:34::i;57942:1103::-;58046:20;-1:-1:-1;;;;;58078:38:0;;52243:42;58078:38;58074:967;;58126:24;:5;-1:-1:-1;;;;;58126:22:0;;:24::i;:::-;58219:34;;;;;-1:-1:-1;;;;;8481:55:1;;;58219:34:0;;;8463:74:1;58219:23:0;;;;;8436:18:1;;58219:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;58204:49;-1:-1:-1;58381:61:0;-1:-1:-1;;;;;58381:30:0;;58412:10;58424:9;58435:6;58381:30;:61::i;:::-;58566:34;;;;;-1:-1:-1;;;;;8481:55:1;;;58566:34:0;;;8463:74:1;58603:12:0;;58566:23;;;;;;8436:18:1;;58566:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;;;;:::i;:::-;58551:64;;58074:967;;;58721:9;58711:6;:19;58707:51;;58739:19;;;;;;;;;;;;;;58707:51;-1:-1:-1;;;;;58827:26:0;;58848:4;58827:26;58823:82;;58863:42;-1:-1:-1;;;;;58863:23:0;;58887:9;58898:6;58863:23;:42::i;:::-;-1:-1:-1;59025:9:0;57942:1103;;;;;:::o;13914:162::-;14000:7;14046:22;14050:3;14062:5;14046:3;:22::i;13485:109::-;13548:7;13570:19;13578:3;9138:18;;9060:101;26318:181;25849:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;26397:98;;26441:47;;;;;-1:-1:-1;;;;;14343:55:1;;26441:47:0;;;14325:74:1;14415:18;;;14408:34;;;14298:18;;26441:47:0;14151:297:1;26397:98:0;26318:181;;:::o;47628:154::-;47733:43;;-1:-1:-1;;;;;14343:55:1;;;47733:43:0;;;14325:74:1;14415:18;;;14408:34;;;47706:71:0;;47726:5;;47748:14;;;;;14298:18:1;;47733:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47706:19;:71::i;28907:290::-;28996:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29008:185;;29045:6;:12;;;;;;;;;;;-1:-1:-1;;;;;29045:29:0;;;;;;;;;:36;;-1:-1:-1;;29045:36:0;29077:4;29045:36;;;29121:12;19686:10;;19611:90;29121:12;-1:-1:-1;;;;;29094:40:0;29112:7;-1:-1:-1;;;;;29094:40:0;29106:4;29094:40;;;;;;;;;;-1:-1:-1;29149:4:0;29142:11;;29008:185;-1:-1:-1;29181:5:0;29174:12;;12708:144;12778:4;12797:50;12802:3;-1:-1:-1;;;;;12822:23:0;;12797:4;:50::i;29416:291::-;29506:4;25868:12;;;;;;;;;;;-1:-1:-1;;;;;25868:29:0;;;;;;;;;;;;29518:185;;;29586:5;29554:12;;;;;;;;;;;-1:-1:-1;;;;;29554:29:0;;;;;;;;;;:37;;-1:-1:-1;;29554:37:0;;;29604:40;19686:10;;29554:12;;29604:40;;29586:5;29604:40;-1:-1:-1;29659:4:0;29652:11;;13006:162;13091:4;13110:53;13118:3;-1:-1:-1;;;;;13138:23:0;;13110:7;:53::i;54246:326::-;54405:38;-1:-1:-1;;;;;54405:38:0;;;54401:69;;54452:18;;;;;;;;;;;;;;54401:69;54518:5;-1:-1:-1;;;;;54518:17:0;;54539:1;54518:22;54514:53;;54549:18;;;;;;;;;;;;;;48011:220;48167:53;;-1:-1:-1;;;;;12168:15:1;;;48167:53:0;;;12150:34:1;12220:15;;;12200:18;;;12193:43;12252:18;;;12245:34;;;48127:99:0;;48154:5;;48182:18;;;;;12062::1;;48167:53:0;11887:398:1;9481:112:0;9548:7;9570:3;:11;;9582:5;9570:18;;;;;;;;:::i;:::-;;;;;;;;;9563:25;;9481:112;;;;:::o;50348:597::-;50751:23;50777:33;-1:-1:-1;;;;;50777:27:0;;50805:4;50777:27;:33::i;:::-;50751:59;;50820:10;:17;50841:1;50820:22;;:57;;;;;50858:10;50847:30;;;;;;;;;;;;:::i;:::-;50846:31;50820:57;50816:125;;;50894:40;;;;;-1:-1:-1;;;;;8481:55:1;;50894:40:0;;;8463:74:1;8436:18;;50894:40:0;8317:226:1;7047:356:0;7110:4;8956:21;;;:14;;;:21;;;;;;7122:277;;-1:-1:-1;7158:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;7322:18;;7298:21;;;:14;;;:21;;;;;;:42;;;;7348:11;;7557:1222;7623:4;7744:21;;;:14;;;:21;;;;;;7776:13;;7772:1003;;8113:18;8134:12;8145:1;8134:8;:12;:::i;:::-;8174:18;;8113:33;;-1:-1:-1;8154:17:0;;8174:22;;8195:1;;8174:22;:::i;:::-;8154:42;;8223:9;8209:10;:23;8205:332;;8244:17;8264:3;:11;;8276:9;8264:22;;;;;;;;:::i;:::-;;;;;;;;;8244:42;;8395:9;8369:3;:11;;8381:10;8369:23;;;;;;;;:::i;:::-;;;;;;;;;;;;:35;;;;8492:25;;;:14;;;:25;;;;;:36;;;8205:332;8603:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;8694:3;:14;;:21;8709:5;8694:21;;;;;;;;;;;8687:28;;;8731:4;8724:11;;;;;;;7772:1003;8763:5;8756:12;;;;;36664:157;36751:12;36778:38;36800:6;36808:4;36814:1;36751:12;37364;37378:23;37405:6;-1:-1:-1;;;;;37405:11:0;37424:5;37431:4;37405:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;37363:73;;;;37449:55;37476:6;37484:7;37493:10;37449:26;:55::i;:::-;37442:62;37125:384;-1:-1:-1;;;;;;37125:384:0:o;38534:510::-;38664:12;38689:7;38684:356;;38706:19;38714:10;38706:7;:19::i;:::-;38684:356;;;38908:17;;:22;:49;;;;-1:-1:-1;;;;;;38934:18:0;;;:23;38908:49;38904:105;;;38976:24;;;;;-1:-1:-1;;;;;8481:55:1;;38976:24:0;;;8463:74:1;8436:18;;38976:24:0;8317:226:1;38904:105:0;-1:-1:-1;39023:10:0;39016:17;;39548:452;39671:17;;:21;39667:329;;39873:10;39867:17;39921:15;39908:10;39904:2;39900:19;39893:44;39667:329;39972:17;;;;;;;;;;;;;;14:332:1;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;821:180;880:6;933:2;921:9;912:7;908:23;904:32;901:52;;;949:1;946;939:12;901:52;-1:-1:-1;972:23:1;;821:180;-1:-1:-1;821:180:1:o;1006:184::-;1058:77;1055:1;1048:88;1155:4;1152:1;1145:15;1179:4;1176:1;1169:15;1195:402;1344:2;1329:18;;1377:1;1366:13;;1356:201;;1413:77;1410:1;1403:88;1514:4;1511:1;1504:15;1542:4;1539:1;1532:15;1356:201;1566:25;;;1195:402;:::o;1602:154::-;-1:-1:-1;;;;;1681:5:1;1677:54;1670:5;1667:65;1657:93;;1746:1;1743;1736:12;1761:134;1829:20;;1858:31;1829:20;1858:31;:::i;:::-;1761:134;;;:::o;1900:388::-;1968:6;1976;2029:2;2017:9;2008:7;2004:23;2000:32;1997:52;;;2045:1;2042;2035:12;1997:52;2084:9;2071:23;2103:31;2128:5;2103:31;:::i;:::-;2153:5;-1:-1:-1;2210:2:1;2195:18;;2182:32;2223:33;2182:32;2223:33;:::i;:::-;2275:7;2265:17;;;1900:388;;;;;:::o;2475:121::-;2560:10;2553:5;2549:22;2542:5;2539:33;2529:61;;2586:1;2583;2576:12;2601:132;2668:20;;2697:30;2668:20;2697:30;:::i;2738:118::-;2824:5;2817:13;2810:21;2803:5;2800:32;2790:60;;2846:1;2843;2836:12;2861:128;2926:20;;2955:28;2926:20;2955:28;:::i;2994:1085::-;3112:6;3120;3128;3136;3144;3152;3160;3168;3221:3;3209:9;3200:7;3196:23;3192:33;3189:53;;;3238:1;3235;3228:12;3189:53;3277:9;3264:23;3296:30;3320:5;3296:30;:::i;:::-;3345:5;-1:-1:-1;3402:2:1;3387:18;;3374:32;3415:33;3374:32;3415:33;:::i;:::-;3467:7;-1:-1:-1;3526:2:1;3511:18;;3498:32;3539:33;3498:32;3539:33;:::i;:::-;3591:7;-1:-1:-1;3650:2:1;3635:18;;3622:32;3663:33;3622:32;3663:33;:::i;:::-;3715:7;-1:-1:-1;3774:3:1;3759:19;;3746:33;3788;3746;3788;:::i;:::-;3840:7;-1:-1:-1;3894:3:1;3879:19;;3866:33;;-1:-1:-1;3946:3:1;3931:19;;3918:33;;-1:-1:-1;4003:3:1;3988:19;;3975:33;4017:30;3975:33;4017:30;:::i;:::-;4066:7;4056:17;;;2994:1085;;;;;;;;;;;:::o;4084:315::-;4152:6;4160;4213:2;4201:9;4192:7;4188:23;4184:32;4181:52;;;4229:1;4226;4219:12;4181:52;4265:9;4252:23;4242:33;;4325:2;4314:9;4310:18;4297:32;4338:31;4363:5;4338:31;:::i;4404:184::-;4456:77;4453:1;4446:88;4553:4;4550:1;4543:15;4577:4;4574:1;4567:15;4593:252;4665:2;4659:9;4707:3;4695:16;;4741:18;4726:34;;4762:22;;;4723:62;4720:88;;;4788:18;;:::i;:::-;4824:2;4817:22;4593:252;:::o;4850:247::-;4917:2;4911:9;4959:3;4947:16;;4993:18;4978:34;;5014:22;;;4975:62;4972:88;;;5040:18;;:::i;5102:777::-;5144:5;5197:3;5190:4;5182:6;5178:17;5174:27;5164:55;;5215:1;5212;5205:12;5164:55;5251:6;5238:20;5277:18;5314:2;5310;5307:10;5304:36;;;5320:18;;:::i;:::-;5454:2;5448:9;5516:4;5508:13;;5359:66;5504:22;;;5528:2;5500:31;5496:40;5484:53;;;5552:18;;;5572:22;;;5549:46;5546:72;;;5598:18;;:::i;:::-;5638:10;5634:2;5627:22;5673:2;5665:6;5658:18;5719:3;5712:4;5707:2;5699:6;5695:15;5691:26;5688:35;5685:55;;;5736:1;5733;5726:12;5685:55;5800:2;5793:4;5785:6;5781:17;5774:4;5766:6;5762:17;5749:54;5847:1;5840:4;5835:2;5827:6;5823:15;5819:26;5812:37;5867:6;5858:15;;;;;;5102:777;;;;:::o;5884:455::-;5961:6;5969;6022:2;6010:9;6001:7;5997:23;5993:32;5990:52;;;6038:1;6035;6028:12;5990:52;6078:9;6065:23;6111:18;6103:6;6100:30;6097:50;;;6143:1;6140;6133:12;6097:50;6166:49;6207:7;6198:6;6187:9;6183:22;6166:49;:::i;:::-;6156:59;;;6265:2;6254:9;6250:18;6237:32;6278:31;6303:5;6278:31;:::i;6344:865::-;6432:6;6485:3;6473:9;6464:7;6460:23;6456:33;6453:53;;;6502:1;6499;6492:12;6453:53;6528:22;;:::i;:::-;6573:28;6591:9;6573:28;:::i;:::-;6566:5;6559:43;6634:38;6668:2;6657:9;6653:18;6634:38;:::i;:::-;6629:2;6622:5;6618:14;6611:62;6705:38;6739:2;6728:9;6724:18;6705:38;:::i;:::-;6700:2;6693:5;6689:14;6682:62;6776:38;6810:2;6799:9;6795:18;6776:38;:::i;:::-;6771:2;6764:5;6760:14;6753:62;6848:39;6882:3;6871:9;6867:19;6848:39;:::i;:::-;6842:3;6835:5;6831:15;6824:64;6949:3;6938:9;6934:19;6921:33;6915:3;6908:5;6904:15;6897:58;7016:3;7005:9;7001:19;6988:33;6982:3;6975:5;6971:15;6964:58;7055:36;7086:3;7075:9;7071:19;7055:36;:::i;:::-;7049:3;7038:15;;7031:61;7111:3;7159:18;;;7146:32;7130:14;;;7123:56;;;;-1:-1:-1;7042:5:1;6344:865;-1:-1:-1;6344:865:1:o;7214:320::-;7282:6;7335:2;7323:9;7314:7;7310:23;7306:32;7303:52;;;7351:1;7348;7341:12;7303:52;7391:9;7378:23;7424:18;7416:6;7413:30;7410:50;;;7456:1;7453;7446:12;7410:50;7479:49;7520:7;7511:6;7500:9;7496:22;7479:49;:::i;:::-;7469:59;7214:320;-1:-1:-1;;;;7214:320:1:o;7539:388::-;7616:6;7624;7677:2;7665:9;7656:7;7652:23;7648:32;7645:52;;;7693:1;7690;7683:12;7645:52;7733:9;7720:23;7766:18;7758:6;7755:30;7752:50;;;7798:1;7795;7788:12;7752:50;7821:49;7862:7;7853:6;7842:9;7838:22;7821:49;:::i;:::-;7811:59;7917:2;7902:18;;;;7889:32;;-1:-1:-1;;;;7539:388:1:o;7932:248::-;8000:6;8008;8061:2;8049:9;8040:7;8036:23;8032:32;8029:52;;;8077:1;8074;8067:12;8029:52;-1:-1:-1;;8100:23:1;;;8170:2;8155:18;;;8142:32;;-1:-1:-1;7932:248:1:o;8980:1373::-;9211:13;;8957:10;8946:22;8934:35;;9180:3;9165:19;;9283:4;9275:6;9271:17;9265:24;9298:53;9345:4;9334:9;9330:20;9316:12;8957:10;8946:22;8934:35;;8881:94;9298:53;;9400:4;9392:6;9388:17;9382:24;9415:56;9465:4;9454:9;9450:20;9434:14;-1:-1:-1;;;;;8251:54:1;8239:67;;8185:127;9415:56;;9520:4;9512:6;9508:17;9502:24;9535:56;9585:4;9574:9;9570:20;9554:14;-1:-1:-1;;;;;8251:54:1;8239:67;;8185:127;9535:56;;9640:4;9632:6;9628:17;9622:24;9655:56;9705:4;9694:9;9690:20;9674:14;-1:-1:-1;;;;;8251:54:1;8239:67;;8185:127;9655:56;;9760:4;9752:6;9748:17;9742:24;9775:56;9825:4;9814:9;9810:20;9794:14;-1:-1:-1;;;;;8251:54:1;8239:67;;8185:127;9775:56;;9887:4;9879:6;9875:17;9869:24;9862:4;9851:9;9847:20;9840:54;9950:4;9942:6;9938:17;9932:24;9925:4;9914:9;9910:20;9903:54;9976:6;10036:2;10028:6;10024:15;10018:22;10013:2;10002:9;9998:18;9991:50;;10060:6;10115:2;10107:6;10103:15;10097:22;10128:51;10175:2;10164:9;10160:18;10144:14;421:13;414:21;402:34;;351:91;10128:51;-1:-1:-1;;10198:6:1;10246:15;;;10240:22;10220:18;;;10213:50;10282:6;10330:15;;;10324:22;10304:18;;;;10297:50;;;;8980:1373;:::o;10543:1087::-;10673:6;10681;10689;10697;10705;10713;10721;10729;10737;10790:3;10778:9;10769:7;10765:23;10761:33;10758:53;;;10807:1;10804;10797:12;10758:53;10843:9;10830:23;10820:33;;10903:2;10892:9;10888:18;10875:32;10916:31;10941:5;10916:31;:::i;:::-;10966:5;-1:-1:-1;11023:2:1;11008:18;;10995:32;11036:33;10995:32;11036:33;:::i;:::-;11088:7;-1:-1:-1;11147:2:1;11132:18;;11119:32;11160;11119;11160;:::i;:::-;11211:7;-1:-1:-1;11270:3:1;11255:19;;11242:33;11284;11242;11284;:::i;:::-;11336:7;-1:-1:-1;11395:3:1;11380:19;;11367:33;11409;11367;11409;:::i;:::-;11461:7;11451:17;;;11515:3;11504:9;11500:19;11487:33;11477:43;;11567:3;11556:9;11552:19;11539:33;11529:43;;11619:3;11608:9;11604:19;11591:33;11581:43;;10543:1087;;;;;;;;;;;:::o;11635:247::-;11694:6;11747:2;11735:9;11726:7;11722:23;11718:32;11715:52;;;11763:1;11760;11753:12;11715:52;11802:9;11789:23;11821:31;11846:5;11821:31;:::i;12558:250::-;12643:1;12653:113;12667:6;12664:1;12661:13;12653:113;;;12743:11;;;12737:18;12724:11;;;12717:39;12689:2;12682:10;12653:113;;;-1:-1:-1;;12800:1:1;12782:16;;12775:27;12558:250::o;12813:1014::-;13120:3;13109:9;13102:22;13083:4;13153:6;13147:13;13197:6;13191:3;13180:9;13176:19;13169:35;13223:3;13235:81;13309:6;13304:2;13293:9;13289:18;13282:4;13274:6;13270:17;13235:81;:::i;:::-;13496:10;13484:23;;;;13477:4;13462:20;;13455:53;-1:-1:-1;;;;;13605:15:1;;;13600:2;13585:18;;13578:43;13657:15;;;;13652:2;13637:18;;13630:43;13704:3;13689:19;;13682:35;;;;13748:3;13733:19;;13726:35;;;;13805:14;13798:22;13792:3;13777:19;;13770:51;13368:2;13356:15;;;-1:-1:-1;13352:88:1;13337:104;13333:113;;;;;-1:-1:-1;;12813:1014:1:o;13832:184::-;13884:77;13881:1;13874:88;13981:4;13978:1;13971:15;14005:4;14002:1;13995:15;14021:125;14086:9;;;14107:10;;;14104:36;;;14120:18;;:::i;14453:168::-;14526:9;;;14557;;14574:15;;;14568:22;;14554:37;14544:71;;14595:18;;:::i;14626:274::-;14666:1;14692;14682:189;;14727:77;14724:1;14717:88;14828:4;14825:1;14818:15;14856:4;14853:1;14846:15;14682:189;-1:-1:-1;14885:9:1;;14626:274::o;14905:128::-;14972:9;;;14993:11;;;14990:37;;;15007:18;;:::i;15038:195::-;15077:3;15108:66;15101:5;15098:77;15095:103;;15178:18;;:::i;:::-;-1:-1:-1;15225:1:1;15214:13;;15038:195::o;15872:136::-;15950:13;;15972:30;15950:13;15972:30;:::i;16013:138::-;16092:13;;16114:31;16092:13;16114:31;:::i;16156:132::-;16232:13;;16254:28;16232:13;16254:28;:::i;16293:1183::-;16396:6;16449:3;16437:9;16428:7;16424:23;16420:33;16417:53;;;16466:1;16463;16456:12;16417:53;16492:17;;:::i;:::-;16532:39;16561:9;16532:39;:::i;:::-;16525:5;16518:54;16604:48;16648:2;16637:9;16633:18;16604:48;:::i;:::-;16599:2;16592:5;16588:14;16581:72;16685:49;16730:2;16719:9;16715:18;16685:49;:::i;:::-;16680:2;16673:5;16669:14;16662:73;16767:49;16812:2;16801:9;16797:18;16767:49;:::i;:::-;16762:2;16755:5;16751:14;16744:73;16850:50;16895:3;16884:9;16880:19;16850:50;:::i;:::-;16844:3;16837:5;16833:15;16826:75;16934:50;16979:3;16968:9;16964:19;16934:50;:::i;:::-;16928:3;16921:5;16917:15;16910:75;17039:3;17028:9;17024:19;17018:26;17012:3;17005:5;17001:15;16994:51;17099:3;17088:9;17084:19;17078:26;17072:3;17065:5;17061:15;17054:51;17124:3;17180:2;17169:9;17165:18;17159:25;17154:2;17147:5;17143:14;17136:49;;17204:3;17239:46;17281:2;17270:9;17266:18;17239:46;:::i;:::-;17223:14;;;17216:70;17305:3;17346:18;;;17340:25;17324:14;;;17317:49;17385:3;17426:18;;;17420:25;17404:14;;;17397:49;;;;-1:-1:-1;17227:5:1;16293:1183;-1:-1:-1;16293:1183:1:o;18637:184::-;18707:6;18760:2;18748:9;18739:7;18735:23;18731:32;18728:52;;;18776:1;18773;18766:12;18728:52;-1:-1:-1;18799:16:1;;18637:184;-1:-1:-1;18637:184:1:o;19128:::-;19180:77;19177:1;19170:88;19277:4;19274:1;19267:15;19301:4;19298:1;19291:15;19317:245;19384:6;19437:2;19425:9;19416:7;19412:23;19408:32;19405:52;;;19453:1;19450;19443:12;19405:52;19485:9;19479:16;19504:28;19526:5;19504:28;:::i;19567:184::-;19619:77;19616:1;19609:88;19716:4;19713:1;19706:15;19740:4;19737:1;19730:15;19756:287;19885:3;19923:6;19917:13;19939:66;19998:6;19993:3;19986:4;19978:6;19974:17;19939:66;:::i;:::-;20021:16;;;;;19756:287;-1:-1:-1;;19756:287:1:o","abiDefinition":[{"inputs":[{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AccessControlBadConfirmation","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"bytes32","name":"neededRole","type":"bytes32"}],"name":"AccessControlUnauthorizedAccount","type":"error"},{"inputs":[{"internalType":"address","name":"target","type":"address"}],"name":"AddressEmptyCode","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"AddressInsufficientBalance","type":"error"},{"inputs":[],"name":"AmountIncorrect","type":"error"},{"inputs":[],"name":"ChainIncorrect","type":"error"},{"inputs":[],"name":"DeadlineExceeded","type":"error"},{"inputs":[],"name":"DeadlineNotExceeded","type":"error"},{"inputs":[],"name":"DeadlineTooShort","type":"error"},{"inputs":[],"name":"DisputePeriodNotPassed","type":"error"},{"inputs":[],"name":"DisputePeriodPassed","type":"error"},{"inputs":[],"name":"FailedInnerCall","type":"error"},{"inputs":[],"name":"MsgValueIncorrect","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"inputs":[],"name":"SenderIncorrect","type":"error"},{"inputs":[],"name":"StatusIncorrect","type":"error"},{"inputs":[],"name":"TokenNotContract","type":"error"},{"inputs":[],"name":"TransactionRelayed","type":"error"},{"inputs":[],"name":"ZeroAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"BridgeDepositRefunded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"}],"name":"BridgeProofDisputed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":false,"internalType":"bytes32","name":"transactionHash","type":"bytes32"}],"name":"BridgeProofProvided","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"relayer","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint32","name":"originChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"chainGasAmount","type":"uint256"}],"name":"BridgeRelayed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"bytes","name":"request","type":"bytes"},{"indexed":false,"internalType":"uint32","name":"destChainId","type":"uint32"},{"indexed":false,"internalType":"address","name":"originToken","type":"address"},{"indexed":false,"internalType":"address","name":"destToken","type":"address"},{"indexed":false,"internalType":"uint256","name":"originAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destAmount","type":"uint256"},{"indexed":false,"internalType":"bool","name":"sendChainGas","type":"bool"}],"name":"BridgeRequested","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldChainGasAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"ChainGasAmountUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFeeRate","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"FeeRateUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"FeesSwept","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DISPUTE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_BPS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"FEE_RATE_MAX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GOVERNOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"GUARD_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DEADLINE_PERIOD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFUNDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REFUND_DELAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"RELAYER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"uint32","name":"dstChainId","type":"uint32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"internalType":"struct IFastBridge.BridgeParams","name":"params","type":"tuple"}],"name":"bridge","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeProofs","outputs":[{"internalType":"uint96","name":"timestamp","type":"uint96"},{"internalType":"address","name":"relayer","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeRelays","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeStatuses","outputs":[{"internalType":"enum FastBridge.BridgeStatus","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"relayer","type":"address"}],"name":"canClaim","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"chainGasAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"address","name":"to","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"deployBlock","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"dispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"getBridgeTransaction","outputs":[{"components":[{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"uint32","name":"destChainId","type":"uint32"},{"internalType":"address","name":"originSender","type":"address"},{"internalType":"address","name":"destRecipient","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"uint256","name":"originFeeAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"}],"internalType":"struct IFastBridge.BridgeTransaction","name":"","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFeeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"protocolFees","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"},{"internalType":"bytes32","name":"destTxHash","type":"bytes32"}],"name":"prove","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"refund","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"request","type":"bytes"}],"name":"relay","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"callerConfirmation","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newChainGasAmount","type":"uint256"}],"name":"setChainGasAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"setProtocolFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"recipient","type":"address"}],"name":"sweepProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"dstChainId","type":"uint32"},{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"bool","name":"sendChainGas","type":"bool"}],"name":"testBridge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"address","name":"relayer","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint32","name":"originChainId","type":"uint32"},{"internalType":"address","name":"originToken","type":"address"},{"internalType":"address","name":"destToken","type":"address"},{"internalType":"uint256","name":"originAmount","type":"uint256"},{"internalType":"uint256","name":"destAmount","type":"uint256"},{"internalType":"uint256","name":"rebate","type":"uint256"}],"name":"testRelay","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"DISPUTE_PERIOD()":{"notice":"Dispute period for relayed transactions"},"MIN_DEADLINE_PERIOD()":{"notice":"Minimum deadline period to relay a requested bridge transaction"},"REFUND_DELAY()":{"notice":"Delay for a transaction after which it could be permisionlessly refunded"},"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"notice":"Initiates bridge on origin chain to be relayed by off-chain relayer"},"bridgeProofs(bytes32)":{"notice":"Proof of relayed bridge tx on origin chain"},"bridgeRelays(bytes32)":{"notice":"Whether bridge has been relayed on destination chain"},"bridgeStatuses(bytes32)":{"notice":"Status of the bridge tx on origin chain"},"canClaim(bytes32,address)":{"notice":"Checks if the dispute period has passed so bridge deposit can be claimed"},"chainGasAmount()":{"notice":"Chain gas amount to forward as rebate if requested"},"claim(bytes,address)":{"notice":"Completes bridge transaction on origin chain by claiming originally deposited capital"},"dispute(bytes32)":{"notice":"Disputes an outstanding proof in case relayer provided dest chain tx is invalid"},"getBridgeTransaction(bytes)":{"notice":"Decodes bridge request into a bridge transaction"},"protocolFeeRate()":{"notice":"Protocol fee rate taken on origin amount deposited in origin chain"},"protocolFees(address)":{"notice":"Protocol fee amounts accumulated"},"prove(bytes,bytes32)":{"notice":"Provides proof on origin side that relayer provided funds on destination side of bridge transaction"},"refund(bytes)":{"notice":"Refunds an outstanding bridge transaction in case optimistic bridging failed"},"relay(bytes)":{"notice":"Relays destination side of bridge transaction by off-chain relayer"}},"version":1},"developerDoc":{"errors":{"AccessControlBadConfirmation()":[{"details":"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."}],"AccessControlUnauthorizedAccount(address,bytes32)":[{"details":"The `account` is missing a role."}],"AddressEmptyCode(address)":[{"details":"There's no code at `target` (it is not a contract)."}],"AddressInsufficientBalance(address)":[{"details":"The ETH balance of the account is not enough to perform the operation."}],"FailedInnerCall()":[{"details":"A call to an address target failed. The target may have reverted."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC20 token failed."}]},"events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":{"params":{"params":"The parameters required to bridge"}},"canClaim(bytes32,address)":{"params":{"relayer":"The address of the relayer attempting to claim","transactionId":"The transaction id associated with the encoded bridge transaction to check"}},"claim(bytes,address)":{"params":{"request":"The encoded bridge transaction to claim on origin chain","to":"The recipient address of the funds"}},"dispute(bytes32)":{"params":{"transactionId":"The transaction id associated with the encoded bridge transaction to dispute"}},"getBridgeTransaction(bytes)":{"params":{"request":"The bridge request to decode"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getRoleMember(bytes32,uint256)":{"details":"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."},"getRoleMemberCount(bytes32)":{"details":"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"prove(bytes,bytes32)":{"params":{"destTxHash":"The destination tx hash proving bridge transaction was relayed","request":"The encoded bridge transaction to prove on origin chain"}},"refund(bytes)":{"params":{"request":"The encoded bridge transaction to refund"}},"relay(bytes)":{"params":{"request":"The encoded bridge transaction to relay on destination chain"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ChainIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineNotExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DeadlineTooShort\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputePeriodPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgValueIncorrect\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StatusIncorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransactionRelayed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BridgeDepositRefunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BridgeProofDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"}],\"name\":\"BridgeProofProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainGasAmount\",\"type\":\"uint256\"}],\"name\":\"BridgeRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"BridgeRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldChainGasAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"ChainGasAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"FeeRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FeesSwept\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DISPUTE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_RATE_MAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GUARD_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEADLINE_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUNDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFUND_DELAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"bridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeProofs\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"timestamp\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeRelays\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeStatuses\",\"outputs\":[{\"internalType\":\"enum FastBridge.BridgeStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainGasAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"dispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originSender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"originFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct IFastBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"protocolFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"destTxHash\",\"type\":\"bytes32\"}],\"name\":\"prove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"request\",\"type\":\"bytes\"}],\"name\":\"relay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newChainGasAmount\",\"type\":\"uint256\"}],\"name\":\"setChainGasAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"sweepProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"dstChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sendChainGas\",\"type\":\"bool\"}],\"name\":\"testBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"originChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"originToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebate\",\"type\":\"uint256\"}],\"name\":\"testRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"params\":{\"params\":\"The parameters required to bridge\"}},\"canClaim(bytes32,address)\":{\"params\":{\"relayer\":\"The address of the relayer attempting to claim\",\"transactionId\":\"The transaction id associated with the encoded bridge transaction to check\"}},\"claim(bytes,address)\":{\"params\":{\"request\":\"The encoded bridge transaction to claim on origin chain\",\"to\":\"The recipient address of the funds\"}},\"dispute(bytes32)\":{\"params\":{\"transactionId\":\"The transaction id associated with the encoded bridge transaction to dispute\"}},\"getBridgeTransaction(bytes)\":{\"params\":{\"request\":\"The bridge request to decode\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"prove(bytes,bytes32)\":{\"params\":{\"destTxHash\":\"The destination tx hash proving bridge transaction was relayed\",\"request\":\"The encoded bridge transaction to prove on origin chain\"}},\"refund(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to refund\"}},\"relay(bytes)\":{\"params\":{\"request\":\"The encoded bridge transaction to relay on destination chain\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DISPUTE_PERIOD()\":{\"notice\":\"Dispute period for relayed transactions\"},\"MIN_DEADLINE_PERIOD()\":{\"notice\":\"Minimum deadline period to relay a requested bridge transaction\"},\"REFUND_DELAY()\":{\"notice\":\"Delay for a transaction after which it could be permisionlessly refunded\"},\"bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))\":{\"notice\":\"Initiates bridge on origin chain to be relayed by off-chain relayer\"},\"bridgeProofs(bytes32)\":{\"notice\":\"Proof of relayed bridge tx on origin chain\"},\"bridgeRelays(bytes32)\":{\"notice\":\"Whether bridge has been relayed on destination chain\"},\"bridgeStatuses(bytes32)\":{\"notice\":\"Status of the bridge tx on origin chain\"},\"canClaim(bytes32,address)\":{\"notice\":\"Checks if the dispute period has passed so bridge deposit can be claimed\"},\"chainGasAmount()\":{\"notice\":\"Chain gas amount to forward as rebate if requested\"},\"claim(bytes,address)\":{\"notice\":\"Completes bridge transaction on origin chain by claiming originally deposited capital\"},\"dispute(bytes32)\":{\"notice\":\"Disputes an outstanding proof in case relayer provided dest chain tx is invalid\"},\"getBridgeTransaction(bytes)\":{\"notice\":\"Decodes bridge request into a bridge transaction\"},\"protocolFeeRate()\":{\"notice\":\"Protocol fee rate taken on origin amount deposited in origin chain\"},\"protocolFees(address)\":{\"notice\":\"Protocol fee amounts accumulated\"},\"prove(bytes,bytes32)\":{\"notice\":\"Provides proof on origin side that relayer provided funds on destination side of bridge transaction\"},\"refund(bytes)\":{\"notice\":\"Refunds an outstanding bridge transaction in case optimistic bridging failed\"},\"relay(bytes)\":{\"notice\":\"Relays destination side of bridge transaction by off-chain relayer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"TestFastBridge\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{"DEFAULT_ADMIN_ROLE()":"a217fddf","DISPUTE_PERIOD()":"a5bbe22b","FEE_BPS()":"bf333f2c","FEE_RATE_MAX()":"0f5f6ed7","GOVERNOR_ROLE()":"ccc57490","GUARD_ROLE()":"03ed0ee5","MIN_DEADLINE_PERIOD()":"820688d5","REFUNDER_ROLE()":"5960ccf2","REFUND_DELAY()":"190da595","RELAYER_ROLE()":"926d7d7f","bridge((uint32,address,address,address,address,uint256,uint256,bool,uint256))":"45851694","bridgeProofs(bytes32)":"91ad5039","bridgeRelays(bytes32)":"8379a24f","bridgeStatuses(bytes32)":"051287bc","canClaim(bytes32,address)":"aa9641ab","chainGasAmount()":"e00a83e0","claim(bytes,address)":"41fcb612","deployBlock()":"a3ec191a","dispute(bytes32)":"add98c70","getBridgeTransaction(bytes)":"ac11fb1a","getRoleAdmin(bytes32)":"248a9ca3","getRoleMember(bytes32,uint256)":"9010d07c","getRoleMemberCount(bytes32)":"ca15c873","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","nonce()":"affed0e0","protocolFeeRate()":"58f85880","protocolFees(address)":"dcf844a7","prove(bytes,bytes32)":"886d36ff","refund(bytes)":"5eb7d946","relay(bytes)":"8f0d6f17","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","setChainGasAmount(uint256)":"b250fe6b","setProtocolFeeRate(uint256)":"b13aa2d6","supportsInterface(bytes4)":"01ffc9a7","sweepProtocolFees(address,address)":"06f333f2","testBridge(uint32,address,address,address,address,uint256,uint256,bool)":"23f83f7a","testRelay(bytes32,address,address,uint32,address,address,uint256,uint256,uint256)":"d3504844"}},"solidity/TestSynapseRFQV2_flat.sol:UniversalTokenLib":{"code":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220463bbed70fc82b0693ef8aaaf517248ecd8c497cdee12c9ae6dceeee054a53c164736f6c63430008140033","runtime-code":"0x730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220463bbed70fc82b0693ef8aaaf517248ecd8c497cdee12c9ae6dceeee054a53c164736f6c63430008140033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IFastBridge {\n  struct BridgeTransaction {\n    uint32 originChainId;\n    uint32 destChainId;\n    address originSender; // user (origin)\n    address destRecipient; // user (dest)\n    address originToken;\n    address destToken;\n    uint256 originAmount; // amount in on origin bridge less originFeeAmount\n    uint256 destAmount;\n    uint256 originFeeAmount;\n    bool sendChainGas;\n    uint256 deadline; // user specified deadline for destination relay\n    uint256 nonce;\n  }\n\n  struct BridgeProof {\n    uint96 timestamp;\n    address relayer;\n  }\n\n  // ============ Events ============\n\n  event BridgeRequested(\n    bytes32 indexed transactionId,\n    address indexed sender,\n    bytes request,\n    uint32 destChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  );\n  event BridgeRelayed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 chainGasAmount\n  );\n  event BridgeProofProvided(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    bytes32 transactionHash\n  );\n  event BridgeProofDisputed(\n    bytes32 indexed transactionId,\n    address indexed relayer\n  );\n  event BridgeDepositClaimed(\n    bytes32 indexed transactionId,\n    address indexed relayer,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n  event BridgeDepositRefunded(\n    bytes32 indexed transactionId,\n    address indexed to,\n    address token,\n    uint256 amount\n  );\n\n  // ============ Methods ============\n\n  struct BridgeParams {\n    uint32 dstChainId;\n    address sender;\n    address to;\n    address originToken;\n    address destToken;\n    uint256 originAmount; // should include protocol fee (if any)\n    uint256 destAmount; // should include relayer fee\n    bool sendChainGas;\n    uint256 deadline;\n  }\n\n  /// @notice Initiates bridge on origin chain to be relayed by off-chain relayer\n  /// @param params The parameters required to bridge\n  function bridge(BridgeParams memory params) external payable;\n\n  /// @notice Relays destination side of bridge transaction by off-chain relayer\n  /// @param request The encoded bridge transaction to relay on destination chain\n  function relay(bytes memory request) external payable;\n\n  /// @notice Provides proof on origin side that relayer provided funds on destination side of bridge transaction\n  /// @param request The encoded bridge transaction to prove on origin chain\n  /// @param destTxHash The destination tx hash proving bridge transaction was relayed\n  function prove(bytes memory request, bytes32 destTxHash) external;\n\n  /// @notice Completes bridge transaction on origin chain by claiming originally deposited capital\n  /// @param request The encoded bridge transaction to claim on origin chain\n  /// @param to The recipient address of the funds\n  function claim(bytes memory request, address to) external;\n\n  /// @notice Disputes an outstanding proof in case relayer provided dest chain tx is invalid\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to dispute\n  function dispute(bytes32 transactionId) external;\n\n  /// @notice Refunds an outstanding bridge transaction in case optimistic bridging failed\n  /// @param request The encoded bridge transaction to refund\n  function refund(bytes memory request) external;\n\n  // ============ Views ============\n\n  /// @notice Decodes bridge request into a bridge transaction\n  /// @param request The bridge request to decode\n  function getBridgeTransaction(\n    bytes memory request\n  ) external pure returns (BridgeTransaction memory);\n\n  /// @notice Checks if the dispute period has passed so bridge deposit can be claimed\n  /// @param transactionId The transaction id associated with the encoded bridge transaction to check\n  /// @param relayer The address of the relayer attempting to claim\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool);\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/interfaces/IAdmin.sol\n\npragma solidity ^0.8.0;\n\ninterface IAdmin {\n  // ============ Events ============\n\n  event FeeRateUpdated(uint256 oldFeeRate, uint256 newFeeRate);\n  event FeesSwept(address token, address recipient, uint256 amount);\n\n  event ChainGasAmountUpdated(\n    uint256 oldChainGasAmount,\n    uint256 newChainGasAmount\n  );\n\n  // ============ Methods ============\n\n  function setProtocolFeeRate(uint256 newFeeRate) external;\n\n  function sweepProtocolFees(address token, address recipient) external;\n\n  function setChainGasAmount(uint256 newChainGasAmount) external;\n}\n\n// File: @openzeppelin/contracts/utils/structs/EnumerableSet.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n  // To implement this library for multiple types with as little code\n  // repetition as possible, we write it in terms of a generic Set type with\n  // bytes32 values.\n  // The Set implementation uses private functions, and user-facing\n  // implementations (such as AddressSet) are just wrappers around the\n  // underlying Set.\n  // This means that we can only create new EnumerableSets for types that fit\n  // in bytes32.\n\n  struct Set {\n    // Storage of set values\n    bytes32[] _values;\n    // Position is the index of the value in the `values` array plus 1.\n    // Position 0 is used to mean a value is not in the set.\n    mapping(bytes32 value =\u003e uint256) _positions;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function _add(Set storage set, bytes32 value) private returns (bool) {\n    if (!_contains(set, value)) {\n      set._values.push(value);\n      // The value is stored at length-1, but we add 1 to all indexes\n      // and use 0 as a sentinel value\n      set._positions[value] = set._values.length;\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\n    // We cache the value's position to prevent multiple reads from the same storage slot\n    uint256 position = set._positions[value];\n\n    if (position != 0) {\n      // Equivalent to contains(set, value)\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\n      // This modifies the order of the array, as noted in {at}.\n\n      uint256 valueIndex = position - 1;\n      uint256 lastIndex = set._values.length - 1;\n\n      if (valueIndex != lastIndex) {\n        bytes32 lastValue = set._values[lastIndex];\n\n        // Move the lastValue to the index where the value to delete is\n        set._values[valueIndex] = lastValue;\n        // Update the tracked position of the lastValue (that was just moved)\n        set._positions[lastValue] = position;\n      }\n\n      // Delete the slot where the moved value was stored\n      set._values.pop();\n\n      // Delete the tracked position for the deleted slot\n      delete set._positions[value];\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function _contains(\n    Set storage set,\n    bytes32 value\n  ) private view returns (bool) {\n    return set._positions[value] != 0;\n  }\n\n  /**\n   * @dev Returns the number of values on the set. O(1).\n   */\n  function _length(Set storage set) private view returns (uint256) {\n    return set._values.length;\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\n    return set._values[index];\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function _values(Set storage set) private view returns (bytes32[] memory) {\n    return set._values;\n  }\n\n  // Bytes32Set\n\n  struct Bytes32Set {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n    return _add(set._inner, value);\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal returns (bool) {\n    return _remove(set._inner, value);\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    Bytes32Set storage set,\n    bytes32 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, value);\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(Bytes32Set storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    Bytes32Set storage set,\n    uint256 index\n  ) internal view returns (bytes32) {\n    return _at(set._inner, index);\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    Bytes32Set storage set\n  ) internal view returns (bytes32[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    bytes32[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // AddressSet\n\n  struct AddressSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(AddressSet storage set, address value) internal returns (bool) {\n    return _add(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(\n    AddressSet storage set,\n    address value\n  ) internal returns (bool) {\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    AddressSet storage set,\n    address value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(AddressSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    AddressSet storage set,\n    uint256 index\n  ) internal view returns (address) {\n    return address(uint160(uint256(_at(set._inner, index))));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    AddressSet storage set\n  ) internal view returns (address[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    address[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n\n  // UintSet\n\n  struct UintSet {\n    Set _inner;\n  }\n\n  /**\n   * @dev Add a value to a set. O(1).\n   *\n   * Returns true if the value was added to the set, that is if it was not\n   * already present.\n   */\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\n    return _add(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Removes a value from a set. O(1).\n   *\n   * Returns true if the value was removed from the set, that is if it was\n   * present.\n   */\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\n    return _remove(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns true if the value is in the set. O(1).\n   */\n  function contains(\n    UintSet storage set,\n    uint256 value\n  ) internal view returns (bool) {\n    return _contains(set._inner, bytes32(value));\n  }\n\n  /**\n   * @dev Returns the number of values in the set. O(1).\n   */\n  function length(UintSet storage set) internal view returns (uint256) {\n    return _length(set._inner);\n  }\n\n  /**\n   * @dev Returns the value stored at position `index` in the set. O(1).\n   *\n   * Note that there are no guarantees on the ordering of values inside the\n   * array, and it may change when more values are added or removed.\n   *\n   * Requirements:\n   *\n   * - `index` must be strictly less than {length}.\n   */\n  function at(\n    UintSet storage set,\n    uint256 index\n  ) internal view returns (uint256) {\n    return uint256(_at(set._inner, index));\n  }\n\n  /**\n   * @dev Return the entire set in an array\n   *\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n   */\n  function values(\n    UintSet storage set\n  ) internal view returns (uint256[] memory) {\n    bytes32[] memory store = _values(set._inner);\n    uint256[] memory result;\n\n    /// @solidity memory-safe-assembly\n    assembly {\n      result := store\n    }\n\n    return result;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n  /**\n   * @dev Returns true if this contract implements the interface defined by\n   * `interfaceId`. See the corresponding\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n   * to learn more about how these ids are created.\n   *\n   * This function call must use less than 30 000 gas.\n   */\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual returns (bool) {\n    return interfaceId == type(IERC165).interfaceId;\n  }\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n  function _msgSender() internal view virtual returns (address) {\n    return msg.sender;\n  }\n\n  function _msgData() internal view virtual returns (bytes calldata) {\n    return msg.data;\n  }\n\n  function _contextSuffixLength() internal view virtual returns (uint256) {\n    return 0;\n  }\n}\n\n// File: @openzeppelin/contracts/access/IAccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n  /**\n   * @dev The `account` is missing a role.\n   */\n  error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n  /**\n   * @dev The caller of a function is not the expected one.\n   *\n   * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n   */\n  error AccessControlBadConfirmation();\n\n  /**\n   * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n   *\n   * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n   * {RoleAdminChanged} not being emitted signaling this.\n   */\n  event RoleAdminChanged(\n    bytes32 indexed role,\n    bytes32 indexed previousAdminRole,\n    bytes32 indexed newAdminRole\n  );\n\n  /**\n   * @dev Emitted when `account` is granted `role`.\n   *\n   * `sender` is the account that originated the contract call, an admin role\n   * bearer except when using {AccessControl-_setupRole}.\n   */\n  event RoleGranted(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Emitted when `account` is revoked `role`.\n   *\n   * `sender` is the account that originated the contract call:\n   *   - if using `revokeRole`, it is the admin role bearer\n   *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n   */\n  event RoleRevoked(\n    bytes32 indexed role,\n    address indexed account,\n    address indexed sender\n  );\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(bytes32 role, address account) external view returns (bool);\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function grantRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   */\n  function revokeRole(bytes32 role, address account) external;\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been granted `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   */\n  function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n\n// File: @openzeppelin/contracts/access/AccessControl.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n  struct RoleData {\n    mapping(address account =\u003e bool) hasRole;\n    bytes32 adminRole;\n  }\n\n  mapping(bytes32 role =\u003e RoleData) private _roles;\n\n  bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n  /**\n   * @dev Modifier that checks that an account has a specific role. Reverts\n   * with an {AccessControlUnauthorizedAccount} error including the required role.\n   */\n  modifier onlyRole(bytes32 role) {\n    _checkRole(role);\n    _;\n  }\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControl).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns `true` if `account` has been granted `role`.\n   */\n  function hasRole(\n    bytes32 role,\n    address account\n  ) public view virtual returns (bool) {\n    return _roles[role].hasRole[account];\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n   * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n   */\n  function _checkRole(bytes32 role) internal view virtual {\n    _checkRole(role, _msgSender());\n  }\n\n  /**\n   * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n   * is missing `role`.\n   */\n  function _checkRole(bytes32 role, address account) internal view virtual {\n    if (!hasRole(role, account)) {\n      revert AccessControlUnauthorizedAccount(account, role);\n    }\n  }\n\n  /**\n   * @dev Returns the admin role that controls `role`. See {grantRole} and\n   * {revokeRole}.\n   *\n   * To change a role's admin, use {_setRoleAdmin}.\n   */\n  function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n    return _roles[role].adminRole;\n  }\n\n  /**\n   * @dev Grants `role` to `account`.\n   *\n   * If `account` had not been already granted `role`, emits a {RoleGranted}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function grantRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _grantRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from `account`.\n   *\n   * If `account` had been granted `role`, emits a {RoleRevoked} event.\n   *\n   * Requirements:\n   *\n   * - the caller must have ``role``'s admin role.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function revokeRole(\n    bytes32 role,\n    address account\n  ) public virtual onlyRole(getRoleAdmin(role)) {\n    _revokeRole(role, account);\n  }\n\n  /**\n   * @dev Revokes `role` from the calling account.\n   *\n   * Roles are often managed via {grantRole} and {revokeRole}: this function's\n   * purpose is to provide a mechanism for accounts to lose their privileges\n   * if they are compromised (such as when a trusted device is misplaced).\n   *\n   * If the calling account had been revoked `role`, emits a {RoleRevoked}\n   * event.\n   *\n   * Requirements:\n   *\n   * - the caller must be `callerConfirmation`.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function renounceRole(\n    bytes32 role,\n    address callerConfirmation\n  ) public virtual {\n    if (callerConfirmation != _msgSender()) {\n      revert AccessControlBadConfirmation();\n    }\n\n    _revokeRole(role, callerConfirmation);\n  }\n\n  /**\n   * @dev Sets `adminRole` as ``role``'s admin role.\n   *\n   * Emits a {RoleAdminChanged} event.\n   */\n  function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n    bytes32 previousAdminRole = getRoleAdmin(role);\n    _roles[role].adminRole = adminRole;\n    emit RoleAdminChanged(role, previousAdminRole, adminRole);\n  }\n\n  /**\n   * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleGranted} event.\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (!hasRole(role, account)) {\n      _roles[role].hasRole[account] = true;\n      emit RoleGranted(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n   *\n   * Internal function without access restriction.\n   *\n   * May emit a {RoleRevoked} event.\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual returns (bool) {\n    if (hasRole(role, account)) {\n      _roles[role].hasRole[account] = false;\n      emit RoleRevoked(role, account, _msgSender());\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable is IAccessControl {\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) external view returns (address);\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n// File: @openzeppelin/contracts/access/extensions/AccessControlEnumerable.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is\n  IAccessControlEnumerable,\n  AccessControl\n{\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  mapping(bytes32 role =\u003e EnumerableSet.AddressSet) private _roleMembers;\n\n  /**\n   * @dev See {IERC165-supportsInterface}.\n   */\n  function supportsInterface(\n    bytes4 interfaceId\n  ) public view virtual override returns (bool) {\n    return\n      interfaceId == type(IAccessControlEnumerable).interfaceId ||\n      super.supportsInterface(interfaceId);\n  }\n\n  /**\n   * @dev Returns one of the accounts that have `role`. `index` must be a\n   * value between 0 and {getRoleMemberCount}, non-inclusive.\n   *\n   * Role bearers are not sorted in any particular way, and their ordering may\n   * change at any point.\n   *\n   * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n   * you perform all queries on the same block. See the following\n   * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n   * for more information.\n   */\n  function getRoleMember(\n    bytes32 role,\n    uint256 index\n  ) public view virtual returns (address) {\n    return _roleMembers[role].at(index);\n  }\n\n  /**\n   * @dev Returns the number of accounts that have `role`. Can be used\n   * together with {getRoleMember} to enumerate all bearers of a role.\n   */\n  function getRoleMemberCount(\n    bytes32 role\n  ) public view virtual returns (uint256) {\n    return _roleMembers[role].length();\n  }\n\n  /**\n   * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\n   */\n  function _grantRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool granted = super._grantRole(role, account);\n    if (granted) {\n      _roleMembers[role].add(account);\n    }\n    return granted;\n  }\n\n  /**\n   * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\n   */\n  function _revokeRole(\n    bytes32 role,\n    address account\n  ) internal virtual override returns (bool) {\n    bool revoked = super._revokeRole(role, account);\n    if (revoked) {\n      _roleMembers[role].remove(account);\n    }\n    return revoked;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/Errors.sol\n\npragma solidity 0.8.20;\n\nerror DeadlineExceeded();\nerror DeadlineNotExceeded();\nerror DeadlineTooShort();\nerror InsufficientOutputAmount();\n\nerror MsgValueIncorrect();\nerror PoolNotFound();\nerror TokenAddressMismatch();\nerror TokenNotContract();\nerror TokenNotETH();\nerror TokensIdentical();\n\nerror ChainIncorrect();\nerror AmountIncorrect();\nerror ZeroAddress();\n\nerror DisputePeriodNotPassed();\nerror DisputePeriodPassed();\nerror SenderIncorrect();\nerror StatusIncorrect();\nerror TransactionIdIncorrect();\nerror TransactionRelayed();\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n  /**\n   * @dev The ETH balance of the account is not enough to perform the operation.\n   */\n  error AddressInsufficientBalance(address account);\n\n  /**\n   * @dev There's no code at `target` (it is not a contract).\n   */\n  error AddressEmptyCode(address target);\n\n  /**\n   * @dev A call to an address target failed. The target may have reverted.\n   */\n  error FailedInnerCall();\n\n  /**\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n   * `recipient`, forwarding all available gas and reverting on errors.\n   *\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n   * imposed by `transfer`, making them unable to receive funds via\n   * `transfer`. {sendValue} removes this limitation.\n   *\n   * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n   *\n   * IMPORTANT: because control is transferred to `recipient`, care must be\n   * taken to not create reentrancy vulnerabilities. Consider using\n   * {ReentrancyGuard} or the\n   * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n   */\n  function sendValue(address payable recipient, uint256 amount) internal {\n    if (address(this).balance \u003c amount) {\n      revert AddressInsufficientBalance(address(this));\n    }\n\n    (bool success, ) = recipient.call{value: amount}('');\n    if (!success) {\n      revert FailedInnerCall();\n    }\n  }\n\n  /**\n   * @dev Performs a Solidity function call using a low level `call`. A\n   * plain `call` is an unsafe replacement for a function call: use this\n   * function instead.\n   *\n   * If `target` reverts with a revert reason or custom error, it is bubbled\n   * up by this function (like regular Solidity function calls). However, if\n   * the call reverted with no returned reason, this function reverts with a\n   * {FailedInnerCall} error.\n   *\n   * Returns the raw returned data. To convert to the expected return value,\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n   *\n   * Requirements:\n   *\n   * - `target` must be a contract.\n   * - calling `target` with `data` must not revert.\n   */\n  function functionCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    return functionCallWithValue(target, data, 0);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but also transferring `value` wei to `target`.\n   *\n   * Requirements:\n   *\n   * - the calling contract must have an ETH balance of at least `value`.\n   * - the called Solidity function must be `payable`.\n   */\n  function functionCallWithValue(\n    address target,\n    bytes memory data,\n    uint256 value\n  ) internal returns (bytes memory) {\n    if (address(this).balance \u003c value) {\n      revert AddressInsufficientBalance(address(this));\n    }\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a static call.\n   */\n  function functionStaticCall(\n    address target,\n    bytes memory data\n  ) internal view returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.staticcall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n   * but performing a delegate call.\n   */\n  function functionDelegateCall(\n    address target,\n    bytes memory data\n  ) internal returns (bytes memory) {\n    (bool success, bytes memory returndata) = target.delegatecall(data);\n    return verifyCallResultFromTarget(target, success, returndata);\n  }\n\n  /**\n   * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n   * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n   * unsuccessful call.\n   */\n  function verifyCallResultFromTarget(\n    address target,\n    bool success,\n    bytes memory returndata\n  ) internal view returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      // only check if target is a contract if the call was successful and the return data is empty\n      // otherwise we already know that it was a contract\n      if (returndata.length == 0 \u0026\u0026 target.code.length == 0) {\n        revert AddressEmptyCode(target);\n      }\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n   * revert reason or with a default {FailedInnerCall} error.\n   */\n  function verifyCallResult(\n    bool success,\n    bytes memory returndata\n  ) internal pure returns (bytes memory) {\n    if (!success) {\n      _revert(returndata);\n    } else {\n      return returndata;\n    }\n  }\n\n  /**\n   * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n   */\n  function _revert(bytes memory returndata) private pure {\n    // Look for revert reason and bubble it up if present\n    if (returndata.length \u003e 0) {\n      // The easiest way to bubble the revert reason is using memory via assembly\n      /// @solidity memory-safe-assembly\n      assembly {\n        let returndata_size := mload(returndata)\n        revert(add(32, returndata), returndata_size)\n      }\n    } else {\n      revert FailedInnerCall();\n    }\n  }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n  /**\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n   * given ``owner``'s signed approval.\n   *\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n   * ordering also apply here.\n   *\n   * Emits an {Approval} event.\n   *\n   * Requirements:\n   *\n   * - `spender` cannot be the zero address.\n   * - `deadline` must be a timestamp in the future.\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n   * over the EIP712-formatted function arguments.\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\n   *\n   * For more information on the signature format, see the\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n   * section].\n   *\n   * CAUTION: See Security Considerations above.\n   */\n  function permit(\n    address owner,\n    address spender,\n    uint256 value,\n    uint256 deadline,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) external;\n\n  /**\n   * @dev Returns the current nonce for `owner`. This value must be\n   * included whenever a signature is generated for {permit}.\n   *\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\n   * prevents a signature from being used multiple times.\n   */\n  function nonces(address owner) external view returns (uint256);\n\n  /**\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n   */\n  // solhint-disable-next-line func-name-mixedcase\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n  /**\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n   * another (`to`).\n   *\n   * Note that `value` may be zero.\n   */\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n   * a call to {approve}. `value` is the new allowance.\n   */\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n   * @dev Returns the value of tokens in existence.\n   */\n  function totalSupply() external view returns (uint256);\n\n  /**\n   * @dev Returns the value of tokens owned by `account`.\n   */\n  function balanceOf(address account) external view returns (uint256);\n\n  /**\n   * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transfer(address to, uint256 value) external returns (bool);\n\n  /**\n   * @dev Returns the remaining number of tokens that `spender` will be\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n   * zero by default.\n   *\n   * This value changes when {approve} or {transferFrom} are called.\n   */\n  function allowance(\n    address owner,\n    address spender\n  ) external view returns (uint256);\n\n  /**\n   * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n   * caller's tokens.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n   * that someone may use both the old and the new allowance by unfortunate\n   * transaction ordering. One possible solution to mitigate this race\n   * condition is to first reduce the spender's allowance to 0 and set the\n   * desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   * Emits an {Approval} event.\n   */\n  function approve(address spender, uint256 value) external returns (bool);\n\n  /**\n   * @dev Moves a `value` amount of tokens from `from` to `to` using the\n   * allowance mechanism. `value` is then deducted from the caller's\n   * allowance.\n   *\n   * Returns a boolean value indicating whether the operation succeeded.\n   *\n   * Emits a {Transfer} event.\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  using Address for address;\n\n  /**\n   * @dev An operation with an ERC20 token failed.\n   */\n  error SafeERC20FailedOperation(address token);\n\n  /**\n   * @dev Indicates a failed `decreaseAllowance` request.\n   */\n  error SafeERC20FailedDecreaseAllowance(\n    address spender,\n    uint256 currentAllowance,\n    uint256 requestedDecrease\n  );\n\n  /**\n   * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n    _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n  }\n\n  /**\n   * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n   * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n   */\n  function safeTransferFrom(\n    IERC20 token,\n    address from,\n    address to,\n    uint256 value\n  ) internal {\n    _callOptionalReturn(\n      token,\n      abi.encodeCall(token.transferFrom, (from, to, value))\n    );\n  }\n\n  /**\n   * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful.\n   */\n  function safeIncreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 value\n  ) internal {\n    uint256 oldAllowance = token.allowance(address(this), spender);\n    forceApprove(token, spender, oldAllowance + value);\n  }\n\n  /**\n   * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n   * value, non-reverting calls are assumed to be successful.\n   */\n  function safeDecreaseAllowance(\n    IERC20 token,\n    address spender,\n    uint256 requestedDecrease\n  ) internal {\n    unchecked {\n      uint256 currentAllowance = token.allowance(address(this), spender);\n      if (currentAllowance \u003c requestedDecrease) {\n        revert SafeERC20FailedDecreaseAllowance(\n          spender,\n          currentAllowance,\n          requestedDecrease\n        );\n      }\n      forceApprove(token, spender, currentAllowance - requestedDecrease);\n    }\n  }\n\n  /**\n   * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n   * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n   * to be set to zero before setting it to a non-zero value, such as USDT.\n   */\n  function forceApprove(IERC20 token, address spender, uint256 value) internal {\n    bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n    if (!_callOptionalReturnBool(token, approvalCall)) {\n      _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n      _callOptionalReturn(token, approvalCall);\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   */\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n    // the target address contains contract code and also asserts for success in the low-level call.\n\n    bytes memory returndata = address(token).functionCall(data);\n    if (returndata.length != 0 \u0026\u0026 !abi.decode(returndata, (bool))) {\n      revert SafeERC20FailedOperation(address(token));\n    }\n  }\n\n  /**\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\n   * @param token The token targeted by the call.\n   * @param data The call data (encoded using abi.encode or one of its variants).\n   *\n   * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n   */\n  function _callOptionalReturnBool(\n    IERC20 token,\n    bytes memory data\n  ) private returns (bool) {\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n    // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n    // and not revert is the subcall reverts.\n\n    (bool success, bytes memory returndata) = address(token).call(data);\n    return\n      success \u0026\u0026\n      (returndata.length == 0 || abi.decode(returndata, (bool))) \u0026\u0026\n      address(token).code.length \u003e 0;\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/libs/UniversalToken.sol\n\npragma solidity 0.8.20;\n\nlibrary UniversalTokenLib {\n  using SafeERC20 for IERC20;\n\n  address internal constant ETH_ADDRESS =\n    0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n  /// @notice Transfers tokens to the given account. Reverts if transfer is not successful.\n  /// @dev This might trigger fallback, if ETH is transferred to the contract.\n  /// Make sure this can not lead to reentrancy attacks.\n  function universalTransfer(\n    address token,\n    address to,\n    uint256 value\n  ) internal {\n    // Don't do anything, if need to send tokens to this address\n    if (to == address(this)) return;\n    // Don't do anything, if trying to send zero value\n    if (value == 0) return;\n    if (token == ETH_ADDRESS) {\n      /// @dev Note: this can potentially lead to executing code in `to`.\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, ) = to.call{value: value}('');\n      require(success, 'ETH transfer failed');\n    } else {\n      IERC20(token).safeTransfer(to, value);\n    }\n  }\n\n  /// @notice Issues an infinite allowance to the spender, if the current allowance is insufficient\n  /// to spend the given amount.\n  function universalApproveInfinity(\n    address token,\n    address spender,\n    uint256 amountToSpend\n  ) internal {\n    // ETH Chad doesn't require your approval\n    if (token == ETH_ADDRESS) return;\n    // No-op if allowance is already sufficient\n    uint256 allowance = IERC20(token).allowance(address(this), spender);\n    if (allowance \u003e= amountToSpend) return;\n    // Otherwise, reset approval to 0 and set to max allowance\n    if (allowance \u003e 0) IERC20(token).safeDecreaseAllowance(spender, allowance);\n    IERC20(token).safeIncreaseAllowance(spender, type(uint256).max);\n  }\n\n  /// @notice Returns the balance of the given token (or native ETH) for the given account.\n  function universalBalanceOf(\n    address token,\n    address account\n  ) internal view returns (uint256) {\n    if (token == ETH_ADDRESS) {\n      return account.balance;\n    } else {\n      return IERC20(token).balanceOf(account);\n    }\n  }\n\n  /// @dev Checks that token is a contract and not ETH_ADDRESS.\n  function assertIsContract(address token) internal view {\n    // Check that ETH_ADDRESS was not used (in case this is a predeploy on any of the chains)\n    if (token == UniversalTokenLib.ETH_ADDRESS) revert TokenNotContract();\n    // Check that token is not an EOA\n    if (token.code.length == 0) revert TokenNotContract();\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/Admin.sol\n\npragma solidity 0.8.20;\n\ncontract Admin is IAdmin, AccessControlEnumerable {\n  using UniversalTokenLib for address;\n\n  bytes32 public constant RELAYER_ROLE = keccak256('RELAYER_ROLE');\n  bytes32 public constant REFUNDER_ROLE = keccak256('REFUNDER_ROLE');\n  bytes32 public constant GUARD_ROLE = keccak256('GUARD_ROLE');\n  bytes32 public constant GOVERNOR_ROLE = keccak256('GOVERNOR_ROLE');\n\n  uint256 public constant FEE_BPS = 1e6;\n  uint256 public constant FEE_RATE_MAX = 0.01e6; // max 1% on origin amount\n\n  /// @notice Protocol fee rate taken on origin amount deposited in origin chain\n  uint256 public protocolFeeRate;\n\n  /// @notice Protocol fee amounts accumulated\n  mapping(address =\u003e uint256) public protocolFees;\n\n  /// @notice Chain gas amount to forward as rebate if requested\n  uint256 public chainGasAmount;\n\n  constructor(address _owner) {\n    _grantRole(DEFAULT_ADMIN_ROLE, _owner);\n  }\n\n  function setProtocolFeeRate(\n    uint256 newFeeRate\n  ) external onlyRole(GOVERNOR_ROLE) {\n    require(newFeeRate \u003c= FEE_RATE_MAX, 'newFeeRate \u003e max');\n    uint256 oldFeeRate = protocolFeeRate;\n    protocolFeeRate = newFeeRate;\n    emit FeeRateUpdated(oldFeeRate, newFeeRate);\n  }\n\n  function sweepProtocolFees(\n    address token,\n    address recipient\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 feeAmount = protocolFees[token];\n    if (feeAmount == 0) return; // skip if no accumulated fees\n\n    protocolFees[token] = 0;\n    token.universalTransfer(recipient, feeAmount);\n    emit FeesSwept(token, recipient, feeAmount);\n  }\n\n  function setChainGasAmount(\n    uint256 newChainGasAmount\n  ) external onlyRole(GOVERNOR_ROLE) {\n    uint256 oldChainGasAmount = chainGasAmount;\n    chainGasAmount = newChainGasAmount;\n    emit ChainGasAmountUpdated(oldChainGasAmount, newChainGasAmount);\n  }\n}\n\n// File: mainnet/0x5523d3c98809dddb82c686e152f5c58b1b0fb59e/contracts/FastBridge.sol\n\npragma solidity 0.8.20;\n\ncontract FastBridge is IFastBridge, Admin {\n  using SafeERC20 for IERC20;\n  using UniversalTokenLib for address;\n\n  /// @notice Dispute period for relayed transactions\n  uint256 public constant DISPUTE_PERIOD = 30 minutes;\n\n  /// @notice Delay for a transaction after which it could be permisionlessly refunded\n  uint256 public constant REFUND_DELAY = 7 days;\n\n  /// @notice Minimum deadline period to relay a requested bridge transaction\n  uint256 public constant MIN_DEADLINE_PERIOD = 30 minutes;\n\n  enum BridgeStatus {\n    NULL, // doesn't exist yet\n    REQUESTED,\n    RELAYER_PROVED,\n    RELAYER_CLAIMED,\n    REFUNDED\n  }\n\n  /// @notice Status of the bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeStatus) public bridgeStatuses;\n  /// @notice Proof of relayed bridge tx on origin chain\n  mapping(bytes32 =\u003e BridgeProof) public bridgeProofs;\n  /// @notice Whether bridge has been relayed on destination chain\n  mapping(bytes32 =\u003e bool) public bridgeRelays;\n\n  /// @dev to prevent replays\n  uint256 public nonce;\n  // @dev the block the contract was deployed at\n  uint256 public immutable deployBlock;\n\n  constructor(address _owner) Admin(_owner) {\n    deployBlock = block.number;\n  }\n\n  /// @notice Pulls a requested token from the user to the requested recipient.\n  /// @dev Be careful of re-entrancy issues when msg.value \u003e 0 and recipient != address(this)\n  function _pullToken(\n    address recipient,\n    address token,\n    uint256 amount\n  ) internal returns (uint256 amountPulled) {\n    if (token != UniversalTokenLib.ETH_ADDRESS) {\n      token.assertIsContract();\n      // Record token balance before transfer\n      amountPulled = IERC20(token).balanceOf(recipient);\n      // Token needs to be pulled only if msg.value is zero\n      // This way user can specify WETH as the origin asset\n      IERC20(token).safeTransferFrom(msg.sender, recipient, amount);\n      // Use the difference between the recorded balance and the current balance as the amountPulled\n      amountPulled = IERC20(token).balanceOf(recipient) - amountPulled;\n    } else {\n      // Otherwise, we need to check that ETH amount matches msg.value\n      if (amount != msg.value) revert MsgValueIncorrect();\n      // Transfer value to recipient if not this address\n      if (recipient != address(this))\n        token.universalTransfer(recipient, amount);\n      // We will forward msg.value in the external call later, if recipient is not this contract\n      amountPulled = msg.value;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function getBridgeTransaction(\n    bytes memory request\n  ) public pure returns (BridgeTransaction memory) {\n    return abi.decode(request, (BridgeTransaction));\n  }\n\n  /// @inheritdoc IFastBridge\n  function bridge(BridgeParams memory params) external payable {\n    // check bridge params\n    if (params.dstChainId == block.chainid) revert ChainIncorrect();\n    if (params.originAmount == 0 || params.destAmount == 0)\n      revert AmountIncorrect();\n    if (params.originToken == address(0) || params.destToken == address(0))\n      revert ZeroAddress();\n    if (params.deadline \u003c block.timestamp + MIN_DEADLINE_PERIOD)\n      revert DeadlineTooShort();\n\n    // transfer tokens to bridge contract\n    // @dev use returned originAmount in request in case of transfer fees\n    uint256 originAmount = _pullToken(\n      address(this),\n      params.originToken,\n      params.originAmount\n    );\n\n    // track amount of origin token owed to protocol\n    uint256 originFeeAmount;\n    if (protocolFeeRate \u003e 0)\n      originFeeAmount = (originAmount * protocolFeeRate) / FEE_BPS;\n    originAmount -= originFeeAmount; // remove from amount used in request as not relevant for relayers\n\n    // set status to requested\n    bytes memory request = abi.encode(\n      BridgeTransaction({\n        originChainId: uint32(block.chainid),\n        destChainId: params.dstChainId,\n        originSender: params.sender,\n        destRecipient: params.to,\n        originToken: params.originToken,\n        destToken: params.destToken,\n        originAmount: originAmount,\n        destAmount: params.destAmount,\n        originFeeAmount: originFeeAmount,\n        sendChainGas: params.sendChainGas,\n        deadline: params.deadline,\n        nonce: nonce++ // increment nonce on every bridge\n      })\n    );\n    bytes32 transactionId = keccak256(request);\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n\n    emit BridgeRequested(\n      transactionId,\n      params.sender,\n      request,\n      params.dstChainId,\n      params.originToken,\n      params.destToken,\n      originAmount,\n      params.destAmount,\n      params.sendChainGas\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function relay(bytes memory request) external payable onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n    if (transaction.destChainId != uint32(block.chainid))\n      revert ChainIncorrect();\n\n    // check haven't exceeded deadline for relay to happen\n    if (block.timestamp \u003e transaction.deadline) revert DeadlineExceeded();\n\n    // mark bridge transaction as relayed\n    if (bridgeRelays[transactionId]) revert TransactionRelayed();\n    bridgeRelays[transactionId] = true;\n\n    // transfer tokens to recipient on destination chain and gas rebate if requested\n    address to = transaction.destRecipient;\n    address token = transaction.destToken;\n    uint256 amount = transaction.destAmount;\n\n    uint256 rebate = chainGasAmount;\n    if (!transaction.sendChainGas) {\n      // forward erc20\n      rebate = 0;\n      _pullToken(to, token, amount);\n    } else if (token == UniversalTokenLib.ETH_ADDRESS) {\n      // lump in gas rebate into amount in native gas token\n      _pullToken(to, token, amount + rebate);\n    } else {\n      // forward erc20 then forward gas rebate in native gas token\n      _pullToken(to, token, amount);\n      _pullToken(to, UniversalTokenLib.ETH_ADDRESS, rebate);\n    }\n\n    emit BridgeRelayed(\n      transactionId,\n      msg.sender,\n      to,\n      transaction.originChainId,\n      transaction.originToken,\n      transaction.destToken,\n      transaction.originAmount,\n      transaction.destAmount,\n      rebate\n    );\n  }\n\n  /// @inheritdoc IFastBridge\n  function prove(\n    bytes memory request,\n    bytes32 destTxHash\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    // update bridge tx status given proof provided\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_PROVED;\n    bridgeProofs[transactionId] = BridgeProof({\n      timestamp: uint96(block.timestamp),\n      relayer: msg.sender\n    }); // overflow ok\n\n    emit BridgeProofProvided(transactionId, msg.sender, destTxHash);\n  }\n\n  /// @notice Calculates time since proof submitted\n  /// @dev proof.timestamp stores casted uint96(block.timestamp) block timestamps for gas optimization\n  ///      _timeSince(proof) can accomodate rollover case when block.timestamp \u003e type(uint96).max but\n  ///      proof.timestamp \u003c type(uint96).max via unchecked statement\n  /// @param proof The bridge proof\n  /// @return delta Time delta since proof submitted\n  function _timeSince(\n    BridgeProof memory proof\n  ) internal view returns (uint256 delta) {\n    unchecked {\n      delta = uint96(block.timestamp) - proof.timestamp;\n    }\n  }\n\n  /// @inheritdoc IFastBridge\n  function canClaim(\n    bytes32 transactionId,\n    address relayer\n  ) external view returns (bool) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != relayer) revert SenderIncorrect();\n    return _timeSince(proof) \u003e DISPUTE_PERIOD;\n  }\n\n  /// @inheritdoc IFastBridge\n  function claim(\n    bytes memory request,\n    address to\n  ) external onlyRole(RELAYER_ROLE) {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    // update bridge tx status if able to claim origin collateral\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n\n    BridgeProof memory proof = bridgeProofs[transactionId];\n    if (proof.relayer != msg.sender) revert SenderIncorrect();\n    if (_timeSince(proof) \u003c= DISPUTE_PERIOD) revert DisputePeriodNotPassed();\n\n    bridgeStatuses[transactionId] = BridgeStatus.RELAYER_CLAIMED;\n\n    // update protocol fees if origin fee amount exists\n    if (transaction.originFeeAmount \u003e 0)\n      protocolFees[transaction.originToken] += transaction.originFeeAmount;\n\n    // transfer origin collateral less fee to specified address\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositClaimed(transactionId, msg.sender, to, token, amount);\n  }\n\n  /// @inheritdoc IFastBridge\n  function dispute(bytes32 transactionId) external onlyRole(GUARD_ROLE) {\n    if (bridgeStatuses[transactionId] != BridgeStatus.RELAYER_PROVED)\n      revert StatusIncorrect();\n    if (_timeSince(bridgeProofs[transactionId]) \u003e DISPUTE_PERIOD)\n      revert DisputePeriodPassed();\n\n    // @dev relayer gets slashed effectively if dest relay has gone thru\n    bridgeStatuses[transactionId] = BridgeStatus.REQUESTED;\n    delete bridgeProofs[transactionId];\n\n    emit BridgeProofDisputed(transactionId, msg.sender);\n  }\n\n  /// @inheritdoc IFastBridge\n  function refund(bytes memory request) external {\n    bytes32 transactionId = keccak256(request);\n    BridgeTransaction memory transaction = getBridgeTransaction(request);\n\n    if (hasRole(REFUNDER_ROLE, msg.sender)) {\n      // Refunder can refund if deadline has passed\n      if (block.timestamp \u003c= transaction.deadline) revert DeadlineNotExceeded();\n    } else {\n      // Permissionless refund is allowed after REFUND_DELAY\n      if (block.timestamp \u003c= transaction.deadline + REFUND_DELAY)\n        revert DeadlineNotExceeded();\n    }\n\n    // set status to refunded if still in requested state\n    if (bridgeStatuses[transactionId] != BridgeStatus.REQUESTED)\n      revert StatusIncorrect();\n    bridgeStatuses[transactionId] = BridgeStatus.REFUNDED;\n\n    // transfer origin collateral back to original sender\n    address to = transaction.originSender;\n    address token = transaction.originToken;\n    uint256 amount = transaction.originAmount + transaction.originFeeAmount;\n    token.universalTransfer(to, amount);\n\n    emit BridgeDepositRefunded(transactionId, to, token, amount);\n  }\n}\n\ncontract TestFastBridge is FastBridge {\n  constructor(address _owner) FastBridge(_owner) {}\n\n  function testBridge(\n    uint32 dstChainId,\n    address sender,\n    address to,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    bool sendChainGas\n  ) external {\n    emit BridgeRequested(\n      keccak256('dummyTransactionId'),\n      sender,\n      abi.encodePacked('dummyRequest'),\n      dstChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      sendChainGas\n    );\n  }\n\n  function testRelay(\n    bytes32 transactionId,\n    address relayer,\n    address to,\n    uint32 originChainId,\n    address originToken,\n    address destToken,\n    uint256 originAmount,\n    uint256 destAmount,\n    uint256 rebate\n  ) external {\n    emit BridgeRelayed(\n      transactionId,\n      relayer,\n      to,\n      originChainId,\n      originToken,\n      destToken,\n      originAmount,\n      destAmount,\n      rebate\n    );\n  }\n}\n","language":"Solidity","languageVersion":"0.8.20","compilerVersion":"0.8.20","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"52138:2436:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;52138:2436:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"52138:2436:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TestSynapseRFQV2_flat.sol\":\"UniversalTokenLib\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TestSynapseRFQV2_flat.sol\":{\"keccak256\":\"0xcaf7b494195d382613ad0d1c282ace969bc6bc5ef509da2ccda43a6d1940e311\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a17ed4daa51b7c83e097f4119f0472be4c1fbc5fd5c80860b28f8939716e7ef7\",\"dweb:/ipfs/QmWGxpU1d5Y1Df8BzjRVjmHYoktuEMuSDG29EqoohgQmnM\"]}},\"version\":1}"},"hashes":{}}}